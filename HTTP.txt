HTTP
	Hyper Text Transfer Protocol 超文本传输协议
		传输协议：定义了客户端和服务器端通信时，发送数据的格式
		特点：
			1.基于TCP/IP的高级协议
			2.默认端口号是80
			3.基于请求/响应模型的
			4.无状态的：每次请求之间相互独立，不能交互数据
		历史版本
			1.0：每一次请求响应都会建立连接
			1.1：复用连接
			
Request原理
	1.request对象和response对象的与原理
		1.request和response对象是由服务器创建的，我们来使用它们
		2.request对象是获取请求消息的，response是用来设置响应消息的
	2.request继承体系
		ServletRequest 接口
			HttpServletRequest 接口
				RequestFacade 实现类
	3.request功能：
		1.获取请求消息：
			1.获取请求行数据
				方法：
					1.获取请求方式：String getMethod()
					2.获取虚拟目录：String getContextPath()
					3.获取Servlet路径：String getServletPath();
					4.获取get方式请求参数：String getQueryString();
					5.获取请求URI：
						String getRequestURI
						StringBuffer getRequestURL()
					6.获取协议及版本：String getProtocol()
					7.获取客户机的IP地址：String getRemoteAddr()
			2.获取请求头数据
				方法：
					1.通过请求头的名称获取请求头的值
						String getHeader(String name)
					2.获取所有的请求头名称
						Enumeration<String> getHeaderNames()
			3.获取请求体数据
				请求体：只有POST请求方式才有请求体
				步骤：
					1.获取流对象
						BufferedReader getReader()：获取字符输入流，只能操作字符数据
						ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据
					2.再从流对象中拿数据
		2.其他功能
			1.获取请求参数
				1.String getParameter(String name)：根据参数名称获取参数值
				2.String[] getParameterValues(String name)：根据参数名称获取参数值的数组
				3.Enumeration<String> getParameterNames()：获取所有请求的参数名称
				4.Map<String,String[]> getParameterMap()：获取所有参数的map集合
				中文乱码问题
					get方式在tomcat8后已经解决了
					post方式的，需要在获取参数前，设置Request的编码
						request.setCharacterEncoding("utf-8");
			2.请求转发：一种服务器内部的资源跳转方式
				1.步骤
					1.通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)
					2.使用RequestDispatcher对象来进行转发：forward(ServletRequest request,ServletResponse response)
				2.特点
					1，浏览器地址栏路径不发生变化
					2.只能转发到当前服务器内部资源中
					3.转发是一次请求
			3.共享数据
				域对象：一个有作用范围的对象，可以在范围内共享数据
				request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据
				方法：
					1.void setAttribute(String name,Object obj);存储数据
					2.ObjectgetAttribute(String name);通过键获取值
					3.void removeAttribute(String name);通过键移除值
			4.获取ServletContext对象
				方法：
					getServletContext();获取ServletContext对象
	请求消息数据格式
		1.请求行
			请求方式 请求rul 请求协议/版本
			GET /login.html HTTP/1.1
			
			请求方式
				HTTP协议有7种请求方式，常用的有两种
					GET
						1.请求参数在请求行中，在url后
						2.请求的url长度是有限制的
						3.较不安全
					POST
						1.请求参数在请求体中
						2.请求的url长度没有限制
						3.较安全
		2.请求头
			请求头的名称：请求头值
			常见的请求头：
				1.USER-Agent：浏览器告诉服务器，我访问你是用的浏览器版本信息
					可以在服务器端获取该头的信息，解决浏览器的兼容问题
				2.Referer:http://...
					告诉服务器，当前请求从哪来
					作用：
						1.防盗链
						2.统计
		3.请求空行
			空行，分隔作用
		4.请求体
			封装POST请求消息的请求参数的
			
	响应消息
		数据格式
			1.相应行
				1.组成：协议/版本 相应状态码 状态码描述
				2.相应状态码：服务器告诉客户浏览器本次请求和相应的一个状态
					1.1xx：服务器接收客户端消息，但没有接收完成，等待一段时间后，发送
					2.2xx：成功
					3.3xx：重定向。代表(302,重定向)(304,访问缓存)
					4.4xx：客户端错误
					5.5xx：服务器端错误
			2.响应头
				1.格式：
					头：名称
				2.常见的响应头：
					1.Content-Type:服务器告诉客户端本次响应体数据格式以及编码格式
					2.Content-disposition：服务器告诉客户端以什么样的格式打开响应体数据
						默认值：in-line
						attachment；filename=xxx：以附件形式打开响应体,可用于下载
			3.相应空行
			4.相应体：传输的数据
		Response对象：
			功能：
				1.设置响应行
					1.设置状态码：setStatus(in sc)
				2.设置响应头
					setHeader(String name,String value)
				3.设置相应体
					使用步骤
						1.获取输出流
							字符输出流：PrintWriter getWriter()
							字节输出流：ServletOutputStream getOutputStream()
						2.使用输出流，将数据输出到客户端浏览器
			
		案例
			1.重定向:资源跳转的方式
				1.代码实现：
					1.	response.setStatus(302);
						response.setHeader("location","路径");
					2.简单的重定向方式
						response.sendRedirect("路径");
				2.特点
					1.地址栏发生变化
					2.重定向可以访问其他站点的资源
					3.重定向是两次请求
				3.路径：
					相对路径：通过相对路径不可以确定唯一资源
						如：./index.html
							以.开头
					绝对路径：通过绝对路径可以确定唯一资源
						如：http://localhost:8080/index.html	或/index.html
							全路径或以/开始
			2.字符输出流
				中文乱码问题
					在获取流对象之前，设置流的编码，并告诉浏览器编码方式
						response.setCharacterEncoding("编码方式")
						response.setHeader("content-type","text/html;charset=编码方式")
						
						response.setContentType("text/html;charset=编码方式");
			3.验证码
				//创建验证码图片
				BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB)
				//美化图片
				Graphics g = image.getGraphics();//获取画笔对象
				g.setColor(Color.PINK);//设置画笔颜色
				g.fillReck(0,0,width,height);//填充颜色的区域
				g.setColot(Coloc.BLUE);//边框
				g.drawRect(0,0,width-1,height-1)
				
				//输出图片到页面
				ImageIO.write(image,"jpg",response.getOutputStream());
	BeanUtils工具类，简化数据封装
		1.JavaBean：标准的Java类
			1.要求
				1.类必须被public修饰
				2.必须提供空参的构造器
				3.成员变量必须使用private修饰
				4.提供公共的set和get方法
			2.功能：用于封装JavaBean的
		方法：
			setProperty()
			getProperty()
			populate()
		BeanUtils基本使用
			1.导入jar包：commons-beanutils-1.8.0.jar
			2.获取所有请求参数
				Map<String,String[]> map = req.getParameterMap();
			3.创建User对象
				User user = new User();
			4.使用BeanUtils封装
				BeanUtils.populate(user,map);
	ServletContext对象
		1.概念：代表整个web应用，可以和程序的容器(服务器)通信
		2.获取对象
			1.通过Request对象获取
				request.getServletContext();
			2.通过HttpServlet获取
				this.getServletContext();
			两种方法获取的对象相同
		3.功能：
			1.获取MIME类型：
				MIME类型：在互联网通信过程中定义的一种文件数据类型
					格式：大类型/小类型	text/html	image/jpg
				获取：String getMimeType(String File)；
			2.域对象：共享数据
				1.setAttribute(String name,Object value)
				2.getAttribute(String name)
				3.removeAttribute(String name)
				ServletContext对象范围：所有用户可用
			3.获取文件的真实路径(服务器路径)
				String getRealPath(String path)