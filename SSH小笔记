Struts2是一种基于mvc模式的轻量级web框架，功能大致等同于SpringMVC
优点：
  1.项目开源，使用及拓展方便
  2.提供Exception处理机制
  3.Result方式的页面导航，通过Result标签很方便地实现重定向和页面跳转
  4.方便，使用默认配置即可完成大多数任务项目所需的功能
  
编辑web.xml配置文件，配置Struts2的核心过滤器
  <?xml version="1.0" encoding="UTF-8">
  <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    xsi:schemaLocatioin=""http://java.sun.com/xml/ns/javaee"
    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    id="WebApp_ID" version="2.5">
  <!-- 配置Struts2核心 -->
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>
      org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExceptionFilter
    </filter-class>
  </filter>
  <filter-mapping>
    filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
filter标签内的就是核心控制器，过滤器名是struts2
  struts的控制器功能是通过action完成的，需要在struts.xml文件中写入<action></action>标签
    action标签的name属性表示action处理的请求访问的url。如name="name",则访问localhost:8080/name时会访问到action
    class属性表示对应的class文件，需要全限定类名
    method属性表示访问class文件中的方法
    result子标签中，name属性表示action的返回值
      type属性表示视图技术或跳转方式
        dispatcher:用于跳转页面，通常是jsp页面，这是默认结果
        chain:处理Action链，跳转后的页面仍能获得上个页面的值
        redirect:重定向到一个页面，丢失传递的信息
        redirectAction:重定向到一个Action，丢失传递的信息
        stream:向浏览器发送InputStream对象，通常用于文件下载
      标签中的内容则为跳转的页面
    如<action name="userAction",class="com.xunyi_ko.action.userAction" method="addUser">
      <result name="success">/success.html</result>
      <result name="false">/false.html</result>
    </action>
    为了减少不必要的重复代码，可以选择使用通配符,格式可参考
    <action name="*_*",class="com.xunyi_ko.action.{1}Action" method="{2}">
      <result name="success">/page/{1}/{2}.html</result>
      <result name="false">/false.html</result>
    </action>
    
 struts中的拦截器，类似于servlet的过滤器的操作
  在struts.xml中添加拦截器
    <interceptor name="interceptorName" class="interceptorClass">
      <param name="paramName">paramValue</param>
    </interceptor>
    param标签用于拦截器需要传入参数的时候，可省略
  有时会需要多个拦截器组合使用，重复配置浪费时间，这时需要使用拦截器栈。使用拦截器栈前，需要使用<interceptors>标签和<interceptor-ref>标签
  <interceptors>
    <interceptor name="interceptorName" class="interceptorClass"></interceptor>
    <interceptor-stack name="interceptorStack">
      <interceptor-ref name="oneInterceptor"></interceptor-ref>
      <interceptor-ref name="twoInterceptor"></interceptor-ref>
      <interceptor-ref name="oneInterceptorStack"></interceptor-ref>
      <interceptor-ref name="defaultStack"></interceptor-ref>
    <interceptor-stack>
  </interceptors>
  每个包中的Action都要调用同一个拦截器，则需要重复配置拦截器，浪费功夫，struts中有默认拦截器的概念
  就如同java的无参构造方法，在没有其他构造方法的情况下，默认有一个无参构造方法
  默认拦截器也是这样。在不配置拦截器的情况下，会自行调用默认拦截器。如果配置了，则不会
  默认拦截器的配置方法如下
  <interceptors>
    <interceptor-stack name="myInterceptorStack">
      <interceptor-ref name="oneInterceptor"></interceptor-ref>
      <interceptor-ref name="defaultStack"></interceptor-ref>
    <interceptor-stack>
  </interceptors>
  <default-interceptor-ref name="myInterceptorStack"/>
 自定义拦截器 需要直接或间接实现Interceptor接口，重写方法，主要重写intercept方法
 public abstract String intercept(ActioniInvocation invocation)throws Exception;
 拦截器拦截判断在invocation.invoke()前完成，此方法调用后，即进入下一个拦截器或action
 

hibernate 轻量级orm框架
  用于数据库交互
  spring boot快速整合hibernate
    //pom.xml文件中添加依赖
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    
    //properties文件中添加配置属性
    #mysql
    spring.datasource.url=jdbc:mysql://localhost:3306/?useunicode=true&characterEncoding=utf8
    spring.datasource.username=root
    spring.datasource.password=root
    spring.datasource.driver-class-name=com.mysql.jdbc.Driver
    spring.datasource.max-idle=10
    spring.datasource.max-wait=10000
    spring.datasource.min-idle=5
    spring.datasource.initial-size=5
    # Specify the DBMS
    spring.jpa.database = MYSQL
    # Show or not log for each sql query
    spring.jpa.show-sql = true
    # Hibernate ddl auto (create, create-drop, update)
    spring.jpa.hibernate.ddl-auto = update
    # Naming strategy
    spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
    # stripped before adding them to the entity manager
    spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
    
    dao接口继承JpaRepository<T,ID>
    接口就得到许多jpa自带的查询方法可以使用
    如果想自定义方法，使用如下方式进行查询
      @Query(value = "SELECT u FROM User u WHERE u.name=:name")
      public User findName(@Param("name") String name);
    dao实现类上添加@Repository("Dao")value设为接口名，实现类名必须是接口名加Impl。可以不用implements dao接口
    
    实体类上添加注解@Table(name="")name表示表名，之后即可用类名代替表名进行数据库操作
    实体类属性名与数据库一一对应，主键需要添加@Id,@GeneratedValue注解。
    如果进行需要开启事务的操作，如插入，更新，则@GeneratedValue(strategy=GenerationType.IDENTITY)
    如果有数据库中不存在的，需要添加@Transient注解
    
    复杂的查询或插入、更新操作需要在实现类中完成，具体操作如下
    em.merge()操作可以进行插入和更新操作。区别在于主键是否存在。
      @PersistenceContext
      private EntityManager em;
      
      public int updateUserName(User user) {
        try {
          em.merge(user);
          return 0;
        } catch (Exception e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
          return 1;
        }
      }
      //查询所有教过此学生课的老师
      public Teacher getTeacherByStudent(Student student) {
        String sql = "from Teacher t where t.id in (select teacherId from Course where studentId=:studentId)";
        Query query = em.createQuery(sql);
        query.setParameter("id", university.getId());
        //分页查询，从第0个开始，一次15个
        query.setFirstResult(0);
        query.setMaxResults(15);
        //判断是否有结果，如果有则可以返回单个area，没有则返回空
        try{
          return query.getResultList();
        }catch(Exception e){
          e.printStackTrace();
          return null;
        }
      }
    
Spring
  AOP：面向切面编程。为了将与业务无关，却也为业务模块共同调用的逻辑和责任封装起来，减少系统的重复代码。可用于事务、日志等
  动态代理方式：
    public class MyBeanFactory{
      public static UserDao getBean(){
        //1.准备目标类(IOC)
        final UserDao userDao = new UserDaoImpl();
        //2.创建切面类实例
        final MyAspect myAspect = new MyAspect();
        //3.使用代理类，增强Bean
        return Proxy.newProxyInstance(
          MyAspect.class.getClassLoader(),
          new Class[]{userDao.class},
          new InvocationHandler(){
            @Override
            public Object invoke(Object proxy,Method method,Object[] args) throws Throwable{
              //前增强
              myAspect.doBefore();
              //调用方法
              Object obj = method.invoke(userDao,args);
              //后增强
              myAspect.doAfter();
            }
          }
        );
      }
    }
