// html部分
<input type="file" id="pic" class="hidden">
<img src="/" onclick="choosePic" class="cropper" id="picCropper0">
<button type="button" class="btn" onclick="choosePic()"></button>

<input id="hiddenpicpath" type="hidden" >

//js加载时进行
$(function(){
    // 作为裁剪工具
    $image0 = $("#picCropper0"),

    // 裁剪的参数
    options = {
        aspectRatio: 1,// 纵横比例string/number,默认auto,1表示正方形,16/4表示长方形
        autoCropArea: 1,// 0和1之间的数。定义自动裁剪区域的大小（百分比）
        zoomLevel: 1,// 缩放级别
        data: {// 只支持四个属性：“x”，“y”，“width”和“height”,默认情况下裁剪区将出现在图像的中心。
            x: 20,
            y: 50,
            width: 100,
            height: 100
        },
        modal: true,// 区分裁剪区和背景
        dashed: true,// 设置裁剪区的方格虚线
        autoCrop: true,// 是否自动显示裁剪区
        dragCrop: false,// 使删除当前裁剪区，通过拖动在图像上创建一个新的
        dashed: true,
        modal: true,
        movable: false,// 移动裁剪区
        resizable: false,// 调整裁剪区
        zoomable: true,// 放大图片
        rotatable: true,// true,//旋转图片
        checkImageOrigin: true,// 检查图像的来源，如果它是一个跨原产地形象,crossorigin属性将被添加到图像元素使“旋转”和“getdataurl”

        build: function (e) {},// 创建裁剪区之前触发
        built: function (e) {// 创建裁剪区之后触发
            // $image.cropper("zoom", -1);
            // $image0.cropper("zoom", -1);
            // $image1.cropper("zoom", -1);
            layer.close(index1);
        },
        dragstart: function (e) {},// 裁剪区移动之前触发
        dragmove: function (e) {},// 裁剪区移动之时触发
        dragend: function (e) {}// 裁剪区移动之后触发
    };
})

function choosePic(){
    $("#pic").click();
    
    fileSelect();
    // 将pic里的内容另存一个位置，并清空pic的内容，避免选择同一张图片的时候，无法触发change事件
    $("#hiddenpicpath").val($("#pic").val());
    $("#pic").val("");
}

// 记录支持的文件类型
var extArray = new Array(".jpg", ".jpeg");
function fileSelect(){
    // 判断系统是否支持FileReader
    if (window.FileReader) {
        $("#pic").change(function(){
             var fileReader = new FileReader(), files = this.files;
             if(files.length > 0){
                
                var name = files[0].name;
                var ext = "";
                if (name != "") {
                    // 获取后缀
                    ext = name.substring(name.lastIndexOf('.'), name.length).toLowerCase();
                    
                    // 不符合格式
                    if (!isArrayContainsString(extArray,ext)) {
                        layer.msg("不支持" + ext + "格式图片上传", {icon:5, anim:6, time: 3000});    // 不支持 格式图片上传
                        return false;
                    }
                }
                
                if (getFileSizeMB(files[0].size) > 5) {
                    layer.msg("图片不能超过5M", {icon: 5,anim: 6});  // 图片不能超过5M
                    return false;
                }
                
                // 上传组件
                $('#picCropper0').show();
                
                // loading层 避免重复点击
                index1 = layer.load(1, {
                    shade : [0.5, '#fff']
                // 0.1透明度的白色背景
                });
                
                EXIF.getData(files[0], function() {
                    var allTag = EXIF.getAllTags(this);
                    var ori = EXIF.getTag(this, 'Orientation');
                    if(ori == undefined || ori == null) ori = 1;
                    
                    fileReader.onload = function(e) {
                        var image = new Image();
                        image.src = e.target.result;
                        image.onload = function(){
                            var degree=0, drawWidth, drawHeight;
                            drawWidth = this.naturalWidth;
                            drawHeight = this.naturalHeight;
                            
                            if(drawWidth < 100) {
                                layer.msg("图片尺寸不符合");   // 图片尺寸不符合
                                layer.close(index1);
                                closeCropper(0);
                                return false;
                            }
                            if(drawHeight < 100) {
                                layer.msg("图片尺寸不符合");   // 图片尺寸不符合
                                layer.close(index1);
                                closeCropper(0);
                                return false;
                            }
                            
                            var dataURL;
                            var drawCanvas = document.createElement('canvas');
                            var context = drawCanvas.getContext('2d');
                            
                            switch (ori) {
                            case 3: // 180
                                drawCanvas.width = drawWidth;
                                drawCanvas.height = drawHeight;
                                context.translate(drawWidth, drawHeight);
                                context.rotate(Math.PI);
                                break;
                            case 6: // 90
                                drawCanvas.width = drawHeight;
                                drawCanvas.height = drawWidth;
                                context.rotate(0.5 * Math.PI);
                                context.translate(0, -drawHeight);
                                break;
                            case 8: // -90
                                drawCanvas.width = drawHeight;
                                drawCanvas.height = drawWidth;
                                context.rotate(-0.5 * Math.PI);
                                context.translate(-drawWidth, 0);
                                break;
                            default:
                                drawCanvas.width = drawWidth;
                                drawCanvas.height = drawHeight;
                                break;
                            }
                            context.drawImage(this,0,0,drawWidth,drawHeight);
                            if(ext == '.jpg' || ext == '.jpeg'){
                                ext = "image/jpeg"
                            }else{
                                ext = "image/png"
                            }
                            dataURL = drawCanvas.toDataURL(ext, 1.0);
                            var cwidth =  $("#width").val(), cheight = $("#height").val(), aspectRatio;
                            if(typeof(cwidth) == 'undefined' || typeof(cheight) == 'undefined'){
                                aspectRatio = 100 / 100;
                            }else if(isNaN(cwidth) || isNaN(cheight) || Number(cheight) == 0) {
                                aspectRatio = 100 / 100;
                            }else{
                                aspectRatio = cwidth / cheight;
                            }
                            options['aspectRatio'] = aspectRatio;
                            $image0.cropper(options).cropper("reset", true).cropper("replace", dataURL);
                            $('#optionbtns0').show();
                        }
                    };
                    fileReader.readAsDataURL(files[0]);
                    changeState();
                    $("#hiddenpicpath").val($("#pic").val())
                    $("#pic").val("");
                });
             }
        })
    }else{
        $('#pic').show();
        $('#picCropper0').hide();
        layer.msg("选择图片失败，请重新选择", {icon: 5,anim: 6});   // 选择图片失败，请重新选择。
        return;
    }
}

function isArrayContainsString(array,string){
    for (var j = 0; j < array.length; j++) {
        if (array[j] == string) {
            return true;
        }
    }
    return false;
}

function getFileSizeMB(size){
    return Math.round(size / 1024 / 1024 * 100) / 100;
}

function getFileSizeKB(size){
    return Math.round(size / 1024 * 100) / 100;
}

