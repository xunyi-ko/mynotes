首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。
如果数值超过这个范围，返回 Integer.MAX_VALUE 或 Integer.MIN_VALUE 。

public class Solution{
    public int myAtoi(String str) {
        // 取出空格字符
        String s = str.trim();
        
        // 利用正则表达式，匹配整数
        String reg = "\\d+";
        Pattern pattern = Pattern.compile(reg);
        Matcher matcher = pattern.matcher(s);
        // 如果没找到整数，直接返回
        if(!matcher.find())
            return 0;
        
        // 获取第一个数字字符组成的字符串
        String resStr = matcher.group();
        // 切掉字符串的前面的0串，除非只剩下一个0
        resStr = cutNumberString(resStr);
        long res;
        if(resStr.length() > 11)
            res = Long.MAX_VALUE;
        else
            res = Long.valueOf(resStr);
        char first = s.charAt(0); 
        // 如果第一个字符就是数字字符，则直接输出
        if(first <= '9' && first >= '0'){
            return getMax(res,'+');
        }
        
        char second = s.charAt(1);
        // 如果第二个字符是数字字符，第一个字符是+或-，则看情况输出
        if(second <= '9' && second >= '0'){
            if(first == '+'){
                return getMax(res,'+');
            }else if(first == '-'){
                return getMax(res,'-');
            }
        }
        // 如果第一个字符不是+-号且不是数字字符，则输出0
        return 0;
    }
    
    private int getMax(long res,char c){
        if(c == '+')
            if(res > Integer.MAX_VALUE)
                return Integer.MAX_VALUE;
            else
                return (int) res;
        else
            if(res > Integer.MAX_VALUE)
                return Integer.MIN_VALUE;
            else
                return -(int)res;
    }
    
    private String cutNumberString(String s){
        int begin = 0;
        int size = s.length();
        while(s.charAt(begin) == '0'){
            if(size > begin+1) {
                begin++;
            } else
                return s.substring(begin);
        }
        return s.substring(begin);
    }
}
