// 给定一个链表（链表结点包含一个整型值）的头结点 head。
// 同时给定列表 G，该列表是上述链表中整型值的一个子集。
// 返回列表 G 中组件的个数，这里对组件的定义为：
// 链表中一段最长连续结点的值（该值必须在列表 G 中）构成的集合。
import java.util.Set;
import java.util.HashSet;
class Solution {
    public int numComponents(ListNode head, int[] G) {
		int ans = 0;
        // 用set来存放G中的内容，去除重复
        Set<Integer> set = new HashSet<>();
		for(int i : G){
			set.add(i);
		}
		// flag表示前一个是否不存在于G
		boolean flag = true;
		int val;
        
        // 逻辑：
        //     1.如果一个节点不存在于G，则不增加
        //     2.如果一个节点存在于G，而它的前一个节点也存在于G，则不增加
        //     3.如果一个节点存在于G，而它的前一个节点不存在于G，则增加
        //     4.第一个节点时，算作前一个节点不存在于G
		while(head != null){
            val = head.val;
            if(set.contains(val)){
                if(flag){
                    ans++;
                    flag = false;
                }
            }else{
                flag = true;
            }
            head = head.next;
		}
		return ans;
    }
}
