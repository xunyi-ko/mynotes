// 给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。

// 找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

// 示例:

// X X X X
// X O O X
// X X O X
// X O X X
// 运行你的函数后，矩阵变为：

// X X X X
// X X X X
// X X X X
// X O X X

class Solution {
    char[][] board;
    int[][] checkflags;
    int x;
	int y;
    public void solve(char[][] board) {
        this.board = board;
        int x = board.length;
        if(x < 2)
            return;
		int y = board[0].length;
        this.x = x;
		this.y = y;
        this.checkflags = new int[x][y];
        
        // 从四条边检测O，如果有O，则其四周被为安全区域，否则，都会被置为X
        for(int i = 0, j = 0; i < x; i++){
            doCheck(i,j);
        }
        for(int i = 0, j = y-1; i < x; i++){
            doCheck(i,j);
        }
        for(int i = x-1, j = 0; j < y; j++){
            doCheck(i,j);
        }
        for(int i = 0, j = 0; j < y; j++){
            doCheck(i,j);
        }
        
        for(int i = 0; i < x; i++){
            for(int j = 0; j < y; j++){
                if(checkflags[i][j] == 1){
                }else{
                    board[i][j] = 'X';
                }
            }
            
        }
    }
    
    // 标记四周为安全区域，即不用变为X。然后再调用判断检测的四周位置是否是O，是的话再次调用自身
    public void check(int x,int y){
        if(x + 1 >= this.x){
        }else{
            if(checkflags[x+1][y] != 1){
                doCheck(x+1,y);
            }
        }
        if(x - 1 < 1){
        }else{
            if(checkflags[x-1][y] != 1){
                doCheck(x-1,y);
            }
        }
        if(y - 1 < 1){
        }else{
            if(checkflags[x][y-1] != 1){
                doCheck(x,y-1);
            }
        }
        if(y + 1 >= this.y){
        }else{
            if(checkflags[x][y+1] != 1){
                doCheck(x,y+1);
            }
        }
    }
    
    // 判断当前位置是否是O，是则调用check
    public void doCheck(int x, int y){
        if(board[x][y] == 'O'){
            checkflags[x][y] = 1;
            check(x,y);
        }
    }
}
