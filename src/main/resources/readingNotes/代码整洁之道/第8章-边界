我们很少控制系统中的全部软件。有时我们购买第三方程序包，或者使用开源代码。
有时我们依靠公司中其他团队打造组件或者子系统。不管哪种情况，我们都得将外来代码整合进自己的代码中。
本章介绍一些保持软件边界整洁的实践手段和技巧

1.使用第三方代码
    在接口提供者和使用者之间，存在着与生俱来的矛盾。
    提供者追求普适性，这样就能在多个环境中工作，吸引更多的用户。
    使用者则想要集中满足特定需求的接口。这种矛盾会导致系统边界上出现问题
    
    以java.util.Map为例。Map有着广阔的接口和丰富的功能。
    但是有时这种丰富的功能可能并不合适
    比如如果我们想要map的任何接收者都不能删除map中的任何东西，但是map却有一个clear方法，任何得到对象的人都能轻易地清除map
