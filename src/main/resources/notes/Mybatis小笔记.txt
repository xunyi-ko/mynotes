Mybatis

	mybatis入门
		mybatis概述
			mybatis是一个持久层框架(操作数据库)
			封装了jdbc操作的细节，使得开发者只需要关注sql语句本身。
			使用了ORM思想实现结果集的封装
			ORM：
				Object Relational Mapping 对象关系映射
					就是把数据库表和实体类及实体类的属性对应起来
					让我们可以操作实体类就实现操作数据库表。
			我们需要做到
				实体类中的属性和数据库表的字段名保持一致
		mybatis的环境搭建
			xml方式
				1.创建maven工程并导入坐标
				2.创建实体类和dao的接口
				3.创建mybatis的主配置文件
					mybatissql.xml
						<?xml version="1.0" encoding="UTF-8"?>
						<!DOCTYPE configuration
								PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
								"http://mybatis.org/dtd/mybatis-3-config.dtd">
						<configuration>
							<!-- 配置环境-->
							<environments default="mysql">
								<!-- 配置MySQL的环境-->
								<environment id="mysql">
									<!-- 配置事务的类型-->
									<transactionManager type="JDBC"></transactionManager>
									<!-- 配置数据源-->
									<dataSource type="POOLED">
										<!-- 配置连接数据库的四个基本信息-->
										<property name="driver" value="com.mysql.jdbc.Driver"/>
										<property name="url" value="jdbc:mysql://localhost:3306/mybatisdb"/>
										<property name="username" value="root"/>
										<property name="password" value="root"/>
									</dataSource>

								</environment>
							</environments>
							<!-- 指定映射配置文件的位置，映射配置文件是指每个dao独立的配置文件-->
							<mappers>
								<mapper resource="cn/xunyi/dao/UserDao.xml"></mapper>
							</mappers>
						</configuration>
				4.创建映射配置文件
					UserDao.xml
						<?xml version="1.0" encoding="UTF-8"?>
						<!DOCTYPE mapper
								PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
								"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
						<mapper namespace="cn.xunyi.dao.UserDao">
							<select id="findAll" resultType="cn.xunyi.domain.User">
								select * from user
							</select>
						</mapper>
				注意事项
					1.mybatis的映射配置文件位置必须和dao接口的包结构相同
					2.映射文件的mapper标签namespace属性的取值必须是dao接口的全限定类名
					3.映射配置文件的操作配置，id属性的取值必须是dao接口的方法名
						resultType属性表示从数据库查询到的值封装到哪个类里
						paramterType属性代表方法获取的参数的类型，
			注解方式
				主配置文件
					<?xml version="1.0" encoding="UTF-8"?>
						<!DOCTYPE configuration
								PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
								"http://mybatis.org/dtd/mybatis-3-config.dtd">
						<configuration>
							<!-- 配置环境-->
							<environments default="mysql">
								<!-- 配置MySQL的环境-->
								<environment id="mysql">
									<!-- 配置事务的类型-->
									<transactionManager type="JDBC"></transactionManager>
									<!-- 配置数据源-->
									<dataSource type="POOLED">
										<!-- 配置连接数据库的四个基本信息-->
										<property name="driver" value="com.mysql.jdbc.Driver"/>
										<property name="url" value="jdbc:mysql://localhost:3306/mybatisdb"/>
										<property name="username" value="root"/>
										<property name="password" value="root"/>
									</dataSource>
								</environment>
							</environments>
							<!-- 指定映射配置文件的位置，映射配置文件是指每个dao独立的配置文件-->
							<mappers>
								<mapper class="cn.xunyi.dao.UserDao"></mapper>
							</mappers>
						</configuration>
				dao文件方法上添加注解
					@Select("sql语句")
		mybatis入门案例
			package cn.xunyi;
			
			import cn.xunyi.dao.UserDao;
			import cn.xunyi.domain.User;
			import org.apache.ibatis.io.Resources;
			import org.apache.ibatis.session.SqlSession;
			import org.apache.ibatis.session.SqlSessionFactory;
			import org.apache.ibatis.session.SqlSessionFactoryBuilder;

			import java.io.IOException;
			import java.io.InputStream;
			import java.util.List;

			public class MybatisTest {
				//入门案例
				public static void main(String[] args) throws IOException {
					//1.读取配置文件
					InputStream in = Resources.getResourceAsStream("mybatissql.xml");
					//2.创建SqlSessionFactory工厂
					SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();
					SqlSessionFactory factory = builder.build(in);
					//3.使用工厂生产SqlSession对象
					SqlSession sqlSession = factory.openSession();
					//4.使用SqlSession对象创建Dao代理对象
					UserDao mapper = sqlSession.getMapper(UserDao.class);
					//5.使用代理对象执行方法
					List<User> all = mapper.findAll();
					for(User user:all){
						System.out.println(user);
					}
					//6.释放资源
					sqlSession.close();
					in.close();
				}
			}
		自定义Mybatis的分析
			mybatis在使用代理dao的方式实现CRUD时做了什么事？
				1.创建代理对象
				2.代理对象调用selectList方法
		自定义mybatis框架(了解mybatis中执行细节)
			实现mybatis查询所有的功能，去除mybatis依赖。
			
			
			
	mybatis基本使用
		单表CRUD操作
			通过配置文件的方式
				//查询所有
				<select id="findAll" resultType="cn.xunyi.domain.User">
					select * from user;
				</select>
				//插入一条数据
				<insert id="saveUser" parameterType="cn.xunyi.domain.User">
					insert into user(username,address,sex,birthday)values(#{username},#{address},#{sex},#{birthday})//参数名保持一致
				</insert>
				//更新一条数据
				<update id="updateUser" parameterType="cn.xunyi.domain.User">
					update user set username=#{username},address=#{address},sex=#{sex},birthday=#{birthday}
				</update>
				//删除一条数据
				<delete id="deleteUser" parameterType="int">
					delete from user where id=#{uid}//这里的uid就是一个占位符，可以是任意字符
				</delete>
				//根据参数进行模糊查询
				<select id="findUserByName" parameterType="String" resultType="cn.xunyi.domain.User">
					//select * from user where username like #{name}//这种方式，参数两端必须带有%
					select * from user where username like '%${value}%' 	//这种方式必须用
				</select>
				//插入操作嵌入查询操作
				<insert id="saveUser" parameterType="cn.xunyi.domain.User">
					//keyProperty对应实体类中的属性名称
					<selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
						select last_insert_id()
					</selectKey>
					insert into user(username,address,sex,birthday)values(#{username},#{address},#{sex},#{birthday})
				</insert>
		mybatis的参数和返回值
			如果实体类的属性名称和数据库的列名不同
			会导致查询数据等失败
			解决办法：
				1.起别名
					如：select id as userid from user
						将数据库的列名起别名为类的属性名
				2.添加配置
					<resultMap id="userMap" type="cn.xunyi.domain.User">
						//主键字段对应
						<id property="userid" column="id"></id>
						//非主键字段
						<result property="userName" column="username"></result>
						<result property="userAddress" column="address"></result>
						<result property="userSex" column="sex"></result>
						<result property="userBirthday" column="birthday"></result>
					</resultMap>
					//想使用这个配置内容，需要在查询等配置内容的属性中，添加resultMap=以上的resultMap的id值
		mybatis的dao编写
		mybatis配置的细节
			几个标签的使用
				properties标签
					设置property，配置内容时可以引用，
					可以引入外部文件，使用resource属性
					引用方式
						<property name="driver" value="${driver}"></property>//value大括号中的内容为键名
				typeAliases标签
					用于给domain中类取别名.取别名后不区分大小写
					如
						<typeAliases>
							<typeAliase type="cn.xunyi.dmain.User" alias="user"></typeAliase>
							或
							//会将包中所有的类取别名。不用再加上大段的包名。不再区分大小写
							<package name="cn.xunyi.domain">
						</typeAliases>
				mappers标签
		
		OGNL表达式：Object Graphic Navigation Language
			它是通过对象的取值方法来获取数据，在写法上把get省略了
			比如：获取用户的名称
				类中的写法：user.getUsername();
				OGNL表达式写法：user.username
	mybatis的深入和多表
		mybatis的连接池
			1.连接池：
				在实际开发中都会使用连接池
				因为它可以减少我们获取连接所消耗的时间
			2.mybatis中的连接池
				mybatis连接池提供了3中方式的配置：
					配置的位置：主配置文件中DataSource标签的type属性
					配置的取值：
						POOLED	采用传统的javax.sql.DataSource规范的连接池
						UNPOOLED	采用传统的获取连接的方式，虽然也实现了DataSource，但没有采用池的思想
						JNDI	采用服务器提供的JNDI技术实现，获取DataSource对象
							不同服务器获得的DataSource是不同的
							注意：如果不是web或者maven的war工程，是不能使用的
								tomcat获得的是DBcp
		mybatis的事务控制及设计的方法
			SqlSession sqlSession=factory.openSession(true)
			则设置了事务自动提交
		mybatis基于XML配置的动态SQL语句使用
			if标签
				<select id="findUserByCondition" resultType="User">
					select * from user where 1=1
					<if test="username!=null">
						and username=#{username}
					</if>
				</select>
			where标签
				包裹if标签，可以去掉where 1=1 这部分。
			foreach标签
				<foreach collection="ids" open="and id in(" close")" item="item" separator=",">
					#{item}
				</foreach>
			sql标签	抽取重复的sql语句
				<sql id="defaultUser">
					select * from user
				</sql>
				在其他调用这段sql语句的地方使用
				<include refid="defaultUser"></include>
		mybatis的多表查询
			
			//association作为一对一查询时使用
			<resultMap>
				<result property="money" column="money"></result>
				<association property="user" column="uid" javaType="user">
					<result property="" column=""></result>
					<result property="" column=""></result>
					<result property="" column=""></result>
				</association>
			</resultMap>
			<!--将User对象作为查询内容的-->
			
			//collection作为一对多时使用
			<resultMap id="userAccountMap" type="User">
				<id property="id" column="id"></id>
				<result property="username" column="username"></result>
				<result property="address" column="address"></result>
				<result property="sex" column="sex"></result>
				<result property="birthday" column="birthday"></result>
				<collection property="accounts" ofType="Account">
					<id column="aid" property="aid"></id>
					<result column="uid" property="uid"></result>
					<result column="money" property="money"></result>
				</collection>
			</resultMap>
			<select id="findAll" resultMap="userAccountMap">
				select * from user u left join account a on u.id = a.uid
			</select>
	mybatis的缓存和注解开发
		mybatis中的加载时机(查询的时机)
			延迟加载
				在真正使用数据时才发起查询，不使用时不查询
			立即查询
				只要调用方法马上发起查询
			要实现延迟加载，需要在configuration配置lazyLoadingEnabled为false
				<settings>
					<setting name="lazyLoadingEnabled" value="true"/>
					<setting name="aggressiveLazyLoading" value="false"/>
				</settings>
			
			延迟加载
				AccountDao.xml
				<resultMap id="accountUserMap" type="account">
					<id property="id" column="id"></id>
					<result property="uid" column="uid"></result>
					<result property="money" column="money"></result>
					<association property="user" column="uid" javaType="user" select="cn.xunyi.dao.UserDao.findById"></association>
				<resultMap>
				<select id="findAll" resultMap="accountUserMap">
					select * from account
				</select>
				UserDao.xml
				<select id="findById" parameterType="int" resultType="User">
					select * from user where id=#{uid}
				</select>
		mybatis中的缓存
			什么是缓存
				存在于内存中的临时数据
			为什么使用缓存
				减少和数据库的交互粗疏，提高执行效率
			什么样的数据能使用缓存
				适用于缓存：
					经常查询，不经常改变的，并且书的正确与否对最终结果影响不大的
			Mybatis中的一级缓存和二级缓存
				一级缓存：
					它指的是Mybatis中SqlSession对象的缓存
					当我们执行查询之后，查询的结果会同时存入到SQLSession为我们提供的一块区域中
					该区域的结构是一个Map，当我们再次查询同样的数据，mybatis会先去SqlSession中查询是否存在
					当SqlSession对象消失时，Mybatis的一级缓存也就消失了
				二级缓存
					它指的是Mybatis中SqlSessionFactory对象的缓存
					由同一个SQLSessionFactory对象创建的SqlSession共享其缓存
					使用步骤
						1.让Mybatis框架支持二级缓存(在主配置文件中配置)
							<setting name="cacheEnabled" value"true"/>
						2.让当前的映射文件支持二级缓存(在当前映射文件的配置文件中配置)
							<mapper>
								<cache/>
							</mapper>
						3.让当前的操作支持二级缓存(在select标签中配置)
							<select useCache="true">
					二级缓存存储的是数据而不是对象
		mybatis的注解开发
			环境搭建
			单表CRUD
			多表查询操作
			缓存的配置