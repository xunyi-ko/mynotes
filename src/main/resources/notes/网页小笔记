1.静态资源
	使用静态网页开发技术发布的资源
	特点
		所有用户访问，得到的结果是一样的
		如：文本，图片，音频，视频，HTML，CSS，JavaScript
		如果用户请求的是静态资源，服务器直接将资源发送给浏览器解析，展示资源
2.动态资源
	使用动态网页即时发布的资源
	特点
		不同用户访问，得到的结果可能不一样
		如：jsp/servlet,php,asp...
		如果用户请求的是动态资源，服务器会执行动态资源，转换为静态资源，再发送给浏览器
要学习动态资源，必须先学习静态资源
静态资源
	HTML：用于搭建基础网页，展示页面的内容
	CSS：用于美化页面，布局页面
	JavaScript：控制页面的元素，让页面有一些动态的效果

HTML
	超文本标记语言
	<!--
		注释格式
	-->
	快速入门
		语法
			1.html文档后缀名.html或.htm
			2.标签氛围
				1.围堵标签：如<html></html>
				2.自闭合标签：如<br/>(换行)
			3.标签可以嵌套，但是不能你中有我我中有你
			4.在开始标签中可以定义属性。属性由键值对构成，值需要用引号。
			5.html的标签不区分大小写，建议用小写
	标签
		1.文件标签：构成html最基本的标签
			html：html文档的根标签
			head：头标签。用于指定html文档的一些属性。引入外部的资源
			title：标题标签
			body：体标签
			<!DOCTYPE html>定义文档类型
			<!DOCTYPE html>
			<html>
				<head>
					<meta charset="UTF-8">
					<title></title>
				</head>
				<body>
				</body>
			</html>
		2.文本标签：和文本有关的标签
			<h1>to<h6>：标题标签，自动换行。加粗。数字越大字体越小
			<p>：段落标签
			<br/>：换行
			<hr/>：显示一条水平线
				属性
					color：颜色
					width：宽度
					size：高度
					align：对齐方式
						center：居中
						left：左对齐
						right：右对齐
			<b>：字体加粗
			<i>：字体斜体
			<font>：html5中已过时。控制文本的样式
			<center>：html5中已过时。文本居中
				属性
					color：颜色
					size：大小
					face：字体
			属性定义
				color
					green、red、blue等
					rgb(值1，值2，值3)：十进制数（0-255）
					#+6位十六进制数
				width：
					数值：width=“20”数值的单位默认是px(像素)
					数值%：占比。
		3.图片标签：
			<img/>
				属性：
					src：图片路径+图片名
						./代表当前目录
						../代表上一级目录
					align：对齐方式
					alt：图片加载失败时的替换信息
					width：图片宽度
					height：图片高度
		4.列表标签：
			有序列表:有序号
				<ol>
					属性
						type：序号类型1、A、I等
						start：从几开始
				<li>
			无序列表：无序号
				<ul>
				<li>
		5.链接标签：
			<a>
				属性
					href：指定访问资源的url
					target：指定打开资源的方式
						_self：默认值。在当前页面跳转
						_blank：在空白页面打开
		6.块标签
			<div>默认换行
			<span>行内
		7.语义化标签：html5中为了提高程序的可读性，提供了一些标签。没有样式
			<header>
			<footer>
		8.表格标签：
			<table>：定义表格
				属性
					border：线宽
					width：表格宽度
					cellpadding：单元内容与单元格的距离
					cellspacing：单元格之间的距离
					bgcolor：单元格颜色
					align：对齐方式
			<tr>：代表行
				
			<td>：代表列
				属性
					colspan：跨列
					rowspan：跨行
						被占用的行或列。在对应的位置缺省td标签
			<th>：定义表头单元格(相当于td，不过默认居中)
			<caption>：表格标题。定义在table标签下
			<thead>：表示表格的头部分。包裹<tr>标签
			<tbody>：表示表格的体部分。包裹<tr>标签
			<tfoot>：表示表格的脚部分。包裹<tr>标签
		9.表单标签：用于采集用户输入的数据的,用于和 服务器进行交互
			<form>：定义采集数据的范围
				属性
					action：指定提交数据的url
					method：指定提交方式
						分类：一共七种，两种比较常用
							get：
								请求参数会在地址栏中显示
								请求参数长度是有限制的
								不太安全
							post：
								请求参数不会在地址栏中显示，会封装在请求体中
								请求参数长度没有限制
								较为安全
		表单项
			<input/>：数据要被提交，必须指定name属性
				属性
					type：
						text：文本输入框
						password：密码输入框
						file：文件选择框
						hidden：隐藏域。看不到的
						radio：单选框
							注意：
								1.要想让多个单选框实现单选，name属性的值要相同
								2.指定value属性值表示提交的数据
								3.使用checked属性，表示默认选中
						checkbox：多选框
							需要指定value值表示提交的数据
							checked属性表示默认选中
						按钮
							submit：提交按钮
							button：普通按钮
							image：图片按钮，可以通过src属性指定图片路径
						color：取色器，可以选择颜色
						date：选择日期
						datetime：日期，具体到分
						email：邮箱
						number：数字
					name
					placeholder
						初始时的内容。当输入时，内容自动被取代
			<lable>:指定输入项的文字描述信息
				属性for一眼与input的id属性对应。如果对应了，则点击lable区域，相当于点了输入框
			<select>：下拉列表
				<option>：作为选项
			<textarea>：文本域
				属性
					cols：指定列数
					rows：指定行数(文本框大小)
					

CSS
	概念：Cascading Style Sheets 层叠样式表
		多个样式可以作用在同一个html的元素上，同时生效
	好处
		1.功能比较强大
		2.将内容的展示和样式控制分离
			*降低耦合度
			*让分工协作更容易
			*提高开发的效率
	使用：CSS与html结合方式
		1.内联方式
			*在标签内使用style属性指定css代码
			*如<div style="color:red;"></div>
		2.内部样式
			*在head标签内，定义style标签，style标签的内容就是css代码
			*如<style>
				div{
					color:green;
				}
			</style>
		3.外部样式
			1.定义css资源文件
			2.在head标签内，定义link标签，引入外部资源文件
			*如：
				a.css文件：
					div{
						color:green;
					}
				<link rel="stylesheet" href="css/a.css">
				<div>hello css</div>
				或
					<style>
						@import "css/a.css"
					</style>
	语法
		格式
			选择器{
				属性名：属性值;
				属性名：属性值;
			}
		选择器：筛选具有相似特征的元素
		注意：最后一对属性后可以不加分号
	选择器
		1.基本选择器
			1.ID选择器:建议在一个html页面中id值唯一
				*语法：#id属性值{}
			2.元素选择器：选择具有相同标签名称的元素
				*语法：标签名称{}
				*注意：id选择器优先级高于元素选择器
			3.类选择器：选择具有相同的class属性值的元素
				*语法：.class属性值{}
				类选择器优先级高于元素选择器
		2.扩展选择器
			1.选择所有元素：
				*语法：*{}
			2.并集选择器：
				*语法：选择器1，选择器2{}
			3.子选择器：筛选选择器1元素下的选择器2
				*语法：选择器1   选择器2{}
			4.父选择器：筛选选择器2的父元素选择器1
				*语法：选择器1>选择器2{}
			5.属性选择器：选择元素名称，属性名=属性值的元素(限定元素名称、某属性的属性值)
				*语法：元素名称[属性名="属性值"]{}
			6.伪类选择器：选择一些元素具有的状态
				*语法：元素：状态{}
				*如<a>
					*状态：
						link	初始状态
						hover	鼠标悬浮
						active	鼠标按住
						visited	访问过
						
	属性
		1.字体、文本
			font-size：字体大小
			color：文本颜色
			text-align：对齐方式
			line-height：行高
		2.背景
			background：复合属性。
			*如 background:url(路径) no-repeat center//图片背景、不重复展示图片、图片居中
				background:red
		3.边框
			border：复合属性。边框宽度、线的类型、颜色
		4.尺寸
			width：宽度
			height：高度
		5.盒子模型：控制布局
			属性
				margin：外边距
					margin-top
					margin-left
					margin-right
					margin-bottom
				padding：内边距(默认情况下，内边距会影响盒子的大小)
					box-sizing:border-box;设置盒子的属性，让width和height就是盒子的最终大小
				float：浮动。使得盒子可以在同一行出现
					left：左对齐
					right：右对齐

JavaScript
	概念：一门客户端脚本语言
		*运行在客户端浏览器中的。没一个浏览器都有JavaScript的解析引擎
		*脚本语言：不需要编译，直接就可以被浏览器解析执行
	功能
		*可以来增强用户和html页面的交互过程，可以来控制html元素
		*让页面有一些动态的效果，增强用户的体验。
	JavaScript发展史：
		1.1992年，Nombase公司开发出第一门客户端脚本语言，专门用于表单的校验。C--，后来更名为ScriptEase
		2.1995年，Netscape(网景)公司，开发了一门客户端脚本原因：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript
		3.1996年，微软抄袭JavaScript开发出JScript。
		4.1997年，ECMA(欧洲计算机制造商协会)，制定了所有客户端脚本语言的标准：ECMAScript
		*JavaScript = ECMAScript+JavaScript自己特有的东西(BOM+DOM)
	
	&nbsp：空格
	document.write(内容)：将内容输入html页面。可以用来写html
	alert(参数)：弹出小窗口，内容为alert
	
	ECMAScript：客户端脚本语言的标准
		1.基本语法
			1.与html结合的方式
				1.内部js
					定义<script>标签，标签体内容就是js代码
				2.外部js
					定义<script>标签，通过src属性引入外部的js文件
				注意：
					1.<script>可以定义在html页面的任何地方，但是定义的位置会影响执行顺序
					2.可以定义多个<script>	
			2.注释
				单行注释//
				多行注释/**/
			3.数据类型
				1.原始数据类型(基本数据类型)
					1.number：数字。正数/小数/NaN(not a number 一个不是数字的数字类型)
					2.string：字符串
					3.boolean：true和false
					4.null：一个对象为空的占位符
					5.undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined
				2.引用数据类型：对象
			4.变量：一小块存储数据的内存空间
				java语言是强类型的语言。而JavaScript是弱类型的语言
					强类型：开辟变量存储空间时，定义了数据类型，只能存储固定类型的数据
					弱类型：开辟变量存储空间是，不定义空间的数据类型，可以存放任意类型的数据
				语法：var 变量名 = 初始化值;
			5.运算符
				1.一元运算符：只有一个运算数的运算符
					++   ，--，	 +  ，  -
					自增  自减	可以用+或-将其他类型的数据转为number
					string类型转number。如果可以字面转换，则为数字，否则为NAN
					true转换，为1；false转换，为0
				2.算数运算符
					+ - * / % ...
				3.复制运算符
					= += -= ...
				4.比较运算符
					>  <  >=  <=  ==  ===(全等于)
					比较方式
						1.类型相同，直接比较
							字符串，按照字典顺序比较。按位逐一比较，直到得出大小为止
						2.类型不同，先进行类型转换，再比较
							===，先判断类型。如果类型不一样，直接返回false
				5.逻辑运算符
					&&  ||  !
						其他数据类型转boolean：
							1.number：除了0或者NAN为假，其他都为真
							2.String：除了空字符串，其他都是真
							3.null&undefined：都是false
							4.对象：所有对象都是true
				6.三元运算符
					? :
			6.流程控制语句：
				1.if...else...
				2.switch
					java中，可以接收byte,short,int,char,枚举(1.5),String(1.7)
					JS中可以是任意类型
				3.while
				4.do...while
				5.for
			7.JS特殊语法：
				1.语句以;结尾。如果一行只有一条语句，可以省略
				2.变量的定义使用var关键字，也可以不适用
					*用，定义的是局部变量
					*不用，定义的变量是全局变量
		2.基本对象
			Function：函数对象
				1.创建
					1.var fun = new Function(形式参数列表，方法体)//一般不用
					2.function fun(形式参数列表){
						方法体
					}
					3.var 方法名 = function(形式参数列表){
						方法体
					}
				2.方法
				3.属性
					length：代表形参的个数
				4.特点
					1.方法定义时，形参的类型不用写
					2.方法是一个对象，如果定义名称相同的方法，会覆盖
					3.在JS中，方法的调用只与方法的名称有关，和参数列表无关
					4.在方法声明中有一个隐藏的内置对象(数组)arguments，调用时的所有参数，会传入数组中，可以用于调用
				5.调用
					函数名称(实际参数列表)
			Array：数组对象
				1.创建
					1.var arr = new Array(元素列表);
					2.var arr = new Array(默认长度);
					3.var arr = [元素列表];
				2.方法
					join(参数//分隔符)：将数组中的元素用指定的分隔符拼接为字符串
					push()：向数组的末尾添加一个或更多的元素，并返回新的长度
				3.属性
					length：数组的长度
				4.特点
					1.JS中，数组可以存放不同类型的数据
					2.JS中，数组的长度是可变的
			Boolean
			Date：日期对象
				1.创建
					var date = new Date();
				2.方法
					toLocaleString()：返回当前date对象对应的时间本地字符串表示形式
					getTime()：获取毫秒值
			Math：数学对象
				1.创建
					特点：Math对象不用创建，直接使用
				2.方法
					random()：返回0-1之间的随机数
					cell()：对数进行向上取整
					floor()：对数进行向下取整
					round()：把数四舍五入为最接近的整数
			Number
			String
			RegExp：正则表达式对象
				1.正则表达式：定义字符串的组成规则
					1.单个字符：[]
						如：[a][ab][a-zA-Z0-9]
						*特殊符号代表特殊含义的单个字符：
							\d：单个数字字符[0-9]
							\w：单个单词字符[a-zA-Z0-9_]
					2.量词字符：
						？：表示出现0次或1次
						*：表示出现0次或多次
						+：出现一次或多次
						{m,n}：表示m<=数量<=n
							m如果缺省：最多n次
							n如果缺省：最少m次
					3.开始结束符号
						^开始
						$结束
				2.正则对象
					1.创建
						1.var reg = new RegExp("正则表达式");
						2.var reg = /正则表达式/;
					2.方法
						1.test(参数)：验证指定的字符串是否符合正则表达式定义的规范
			Global：
				1.特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用
				2.方法：
					encodeURI()：把字符串编码为URI
					encodeURIComponent()：把字符串编码为URI组件
					decodeURI()：解码某个编码的URI
					decodeURIComponent()：解码一个编码的URI组件
					parseInt()：将字符串转为数字
						逐一判断每一额字符是否是数字，直到不是数字为止，将前面的数字部分转为number
					isNaN()：判断是否是NaN
						NaN参与的比较、==，永远是false
					eval()：解析JavaScript字符串，并将它作为脚本代码来执行
	BOM
		1.概念：Browser Object Model 浏览器对象模型
			*将浏览器的各个组成部分封装成对象。
		2.组成：
			1.window：窗口对象
				1.创建
					不需要创建，可以直接使用window使用。window.方法名() window.可以省略
				2.方法
					1.与弹出框有关的
						alert()显示带有一段信息和一个确认按钮的警告框
						confirm()显示一段信息以及确认按钮和取消按钮的对话框
							如果用户点击确定按钮，返回true
							如果用户点击取消按钮，返回false
						prompt()显示可提示用户输入的对话框
							返回用户输入的值
					2.与打开关闭有关的方法
						close()关闭窗口//关闭调用函数的对象的窗口
						open()打开新窗口
							参数为网址。
							返回一个新的Window对象。
					3.与定时器有关的方法
						setTimeout()	在指定的毫秒数后调用函数或计算表达式
							参数为js对象或代码，和毫秒值
						clearTimeout()	取消由setTimeout()方法设置的timeout
							参数为setTimeout返回的id值
						setInterval()	按照指定的周期(以毫秒计)来调用含糊或计算表达式
						clearInterval()	取消由seetInterval()设置的timeout
				3.属性
					1.获取其他BOM对象
						1.history
						2.location
						3.screen
						4.navigator
					2.获取DOM对象
						document
			2.Navigator：浏览器对象
			3.Screen：显示器屏幕对象
			4.History：历史记录对象
				1.创建
					1.window.history
					2.history
				2.方法
					back()：加载history列表中的前一个URL
					forward()：加载history列表中的下一个URL
					go()：加载history列表中的某个具体页面
						参数：如果是正数，就是前进几个页面
							如果是负数，就是后退几个页面
				3.属性
					length：返回当前窗口历史列表中的URL数量
			5.Location：地址栏对象
				1.创建
					1.window.location
					2.location
				2.方法
					reload()：重新加载当前文档。刷新
				3.属性
					href：地址
	DOM：
		概念：Document Object Model 文档对象模型
			将标记语言文档的各个组成部分，封装为对象，可以使用这些对象对标记语言文档进行CRUD的动态操作
		W3C DOM 标准被分为3个不同的部分：
			核心DOM - 针对任何结构化文档的标准模型
				Attribute：属性对象
				Text：文本对象
				Comment：注释对象
				document：文档对象
					1.创建：在html dom模型中，可以使用window对象来获取
						1.window.document
						2.document
					2.方法
						1.获取Element对象：
							1.getElementById()：根据id属性值获取元素对象
							2.getElementsByTagName()：根据标签名称，获取元素对象们。返回值为数组
							3.getElementsByClassName()：根据class属性值，获取元素对象们。返回值为数组
							4.getElementByName()：根据name属性获取元素对象们，返回值是数组
						2.创建其他DOM对象
							createAttribute(name)
							createComment()
							createElement()
							createTextNode()
					3.属性
				Element：元素对象
					获取：通过document对象来获取
					方法：
						removeAttribute(属性名)：删除属性
						setAttribute(属性名，属性值)：设置属性
				Node：节点对象，其他五个的父对象
					特点：所有dom对象都可以被认为是节点
					方法：
						appendChild()：向节点的子节点列表的结尾添加新的子节点
						removeChild()：删除(并返回)当前节点的指定子节点
						replaceChild()：用新节点替换一个子节点
					属性：
						parentNode：返回父节点
			XML DOM - 针对XML文档的标准模型
			HTML DOM - 针对HTML文档的标准模型
				标签体的设置和获取：innerHTML
				使用html元素对象的属性
				控制元素样式
					1.对象.style.属性 = ...可以直接使用CSS方式设置样式
					2.提前设置好CSS样式，修改对象.className的值，改变对象的class属性值
		1.事件
			概念：某些组件被执行了某些操作后，触发某些代码的执行
				事件：单击、双击、等
				事件源：组件。如：按钮 文本输入框等
				监听器：代码。
				注册监听：将事件、事件源、监听器结合在一起。当事件源上发生了某个事件，则触发某个监听器代码
			常见的事件：
				1.点击事件：
					1.onclick：单击事件
					2.ondblclick：双击事件
				2.焦点事件：
					1.onfocus：元素获得焦点
					2.onblur：元素失去焦点
				3.加载事件：
					onload：
				4.鼠标事件
					onmousedown：鼠标按下
						定义方法时，定义一个形参，接收event对象
						event对象的button属性对应哪个键按下了
					onmouseup：鼠标按键松开
					onousemove：鼠标被移动
					onmouseover：鼠标移到某元素上
					onmouseout：鼠标从某元素移开
				5.键盘事件
					onkeydown：某个键盘按键被按下
					onkeyup：某个键盘按键被松开
					onkeypress：某个键盘案件被按下并松开
				6.选择和改变
					onchange：域的内容被改变
					onselect：文本被选中
				7.表单事件
					onsubmit：确认按钮被点击
					onreset：重置按钮被点击
	DOM简单学习：为了满足案例需求
		*功能：控制html文档的内容
		*代码：获取页面标签(元素)对象Element
			*document.getElementById("id值")：通过元素的id获取元素对象
		*操作Element对象
			1.设置属性值
				1.明确获取的对象是哪一个
				2.查看API文档，找哪些属性可以修改
			2.修改标签体内容
				修改innerHTML属性，可以修改标签体的内容
			如<a id="title" href="#" target="_self">aaa</a>
				var element = document.getElementById("title");
				element.target = "_blank"
	事件简单学习
		*功能：某些组件被执行了某些操作后，触发某些代码的执行
		*如何绑定事件
			1.直接在html标签行，指定事件的属性(操作)，属性值就是js代码
				1.事件：onclick  单击事件
				如：
					<script>function func1(){方法体}</script>
					<img src="./a.jpg" id="bulb" onclick="func1">
			2.通过js获取元素对象，指定事件属性，设置一个函数
				<img src="./a.jpg" id="bulb">
				<script>
					function func1(){方法体}
					var element = document.getElementById("bulb");
					element.onclick=func1;
				</script>
 
 
 
 