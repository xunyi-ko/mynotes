JDBC基本概念
	java DataBase Connectivity java语言操作数据库
		官方定义的一套操作所有关系型数据库的借口，数据库厂商提供实现类
快速入门
	1.导入驱动jar包
	2.注册驱动
		Class.forName("com.mysql.jdbc.Driver");
	3.获取数据库连接对象Connection
		Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb1", "root", "root");
	4.定义sql
		String sql = "update student set age = 27 where sid = 7";
	5.获取执行sql语句的对象Statement
		Statement stmt = (Statement) conn.createStatement();
	6.执行sql，接受返回结果
		int count = stmt.executeUpdate(sql);
	7.处理结果
	8.释放资源

详解各个对象
	1.DriverManager:驱动管理对象
		功能
			1.注册驱动
				static void registerDriver(Driver driver):注册给定的驱动程序
				mysql5之后会自动注册，可以省略
			2.获取数据库连接
				static Connection getConnection(String url,String user,String password)
	2.Connection:数据库连接对象
		1.获取执行sql的对象
			Statement createStatement()
			PreparedStatement prepareStatement(String sql)
		2.管理事务
			开启事务:setAutoCommit(boolean autoCommit):设置为false，即开启事务
			提交事务:commit()
			回滚事务:rollback()
	3.Statement:执行sql的对象
		执行sql
			boolean execute(String sql)可以执行任意的sql
			int executeUpdate(String sql)执行DML()、DDL(create,alter,drop)返回影响的行数
			ResultSet executeQuery(String sql)执行DQL(select)语句
	4.ResultSet:结果集对象，封装查询对象
		next()光标向下移动一行，返回false代表当前行无数据。
		getXxx(参数)获取相应类型的数据，如getInt()
			参数int,代表编号，从1开始
			参数String，代表列的名称
		isFirst()判断是否是第一行
		isLast()判断是否是最后一行
		last()移动到最后一行
	5.PreparedStatement:执行sql的对象。
		预编译sql，避免sql注入问题
			String sql = "select * from player where account = ? and password = ?";
			PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(sql);
			pstmt.setString(1, account);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();

JDBC管理事务
	使用Connection对象来管理事务
		操作：
		1.开启事务
			setAutoCommit(boolean autoCommit):false,开启事务
		2.提交事务
			commit()
		3.回滚事务
			rollback()
			
数据库连接池
	概念：容器(集合)，存放数据库连接的容器
		当系统初始化好后，容器被创建，容器中会申请一些连接对象
		当用户来我访问数据库时，从容器中获取连接对象
		访问结束后，连接对象返还容器
	好处：
		1.节约资源
		2.用户访问高效
	实现：
		1.标准接口：DataSource	javax.sql包下的
			1.方法：
				获取连接	getConnection()
				返还连接	如果连接对象是从连接池中获取的，那么连接后，自动返还
		2.一般我们不去实现它，由数据库厂商来实现
			1.C3P0：数据库连接池技术
				步骤
					1.导入jar包	c3p0-0.9.5.2.jar  mchange-commons-java-0.2.12.jar
					2.定义配置文件，名字必须是c3p0.properties 或者 c3p0-config.xml
					3.创建核心对象 数据库连接池对象 CombopooledDataSource
						DataSource ds = new ComboPooledDataSource();
						Connection conn = ds.getConnection();
					4.创建DataSource对象时，可以用
						DataSource ds = new ComboPooledDataSource(String name);
						使用特殊的配置参数，而不是用默认参数//一般不需要
			2.Druid：数据库连接池实现技术，由阿里巴巴提供
				1.导入jar包	druid-1.0.9.jar
				2.定义配置文件
					properties格式的任意名称文件
				3.获取数据库连接池对象：通过工厂来获取	DruidDataSourceFactory
				4.获取连接：getConnection
					Properties pro = new Properties();
					pro.load(DruidDemo.class.getClassLoader().getResourceAsStream("Druid.properties));
					DataSource ds = DruidDataSourceFactory.createDataSource(pro);
					Connection conn = ds.getConnection();

Spring JDBC
	Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发
	步骤
		1.导入jar包
		2.创建jdbcTemplate对象，依赖于数据源DataSource
			JdbcTemplate Template = new JdbcTemplate(ds);
		3.调用JdbcTemplate的方法来完成CRUD的操作
			update(sql,...):执行DML语句。增删改语句
				...为sql语句中的?，几个问号填几个参数，一一对应
			queryForMap():查询结果将结果集封装为map对象
				结果集长度只能为1.列名为key，值为value
			queryForList():查询结果将结果集封装为list对象
				将每一条记录封装为map，再封装进list
			query(sql,new RowMapper<T>(){
				@Override
				public T mapRow(ResultSet rs,int i)throws SQLException{
					
				}
			}):查询结果，将结果封装为JavaBean对象
			query(sql,new BeamPropertyRowMapper<T>(T.class));使用默认的实现类返回List
			queryForObject():查询结果，将结果封装为对象
				一般用于聚合函数