Filter&Listener
Filter：过滤器
	1.概念
		当访问服务器的资源时，过滤器可以将请求拦下，完成一些特殊的功能
		过滤器的作用：
			一般用于完成通用的操作。如：登陆验证、统一编码处理、敏感字符过滤
	2.快速入门：
		1.步骤
			1.定义一个类，实现Filter接口
			2.实现方法
			3.设置@WebFilter("")设置拦截的路径(配置拦截路径)
				doFilter方法中，如果调用filterChain.doFilter(servletRequest,servletResponse)方法可以放行
	3.过滤器细节
		1.web.xml配置
			<filter>
				<filter-name>demo1</filter-name>
				<filter-class>cn.itcast.web.filter.FilterDemo1</filter-class>
			</filter>
			<filter-mapping>
				<filter-name>demo1</filter-name>
				<url-pattern>/*</url-pattern>
			</filter-mapping>
		2.过滤器执行流程
			
		3.过滤器生命周期方法
			服务器启动后，会创建Filter对象，然后调用init方法
			服务器正常关闭后会调用destroy方法
			doFilter在每次拦截请求后会调用
		4.过滤器配置详情
			1.拦截路径配置：
				1.具体资源路径：/index.jsp	只有访问index.jsp时，过滤器才会被执行
				2.拦截目录：/user/*		访问/user目录下的资源时，执行过滤器
				3.后缀名拦截：*.jsp		访问所有后缀名为jsp时，执行过滤器
				4.拦截所有资源：/*		拦截所有资源
			2.拦截方式配置：资源被访问的方式
				注解配置：
					设置dispatcherTypes属性
						1.REQUEST：默认值，浏览器直接请求资源
						2.FORWARD：转发访问资源
						3.INCLUDE：包含访问资源
						4.ERROR：错误跳转资源
						5.ASYNC：异步访问资源
				web.xml方式配置
					设置<dispatcherType></dispatcherType>标签。属性是以上五种
		5.过滤器链：可以有多个过滤器同时存在。
			过滤器的顺序
				1.注解配置的过滤器：按照类名的字符串比较规则，值小的先执行
				2.web.xml配置的过滤器：<filter-mapping>标签在上的先执行
					
	4.案例：
		1.登陆验证案例
		2.敏感词过滤
			需求：
				对录入的数据进行敏感词汇过滤，如果是，替换为***
			分析：
				1.对request对象进行增强
			增强对象的功能
				设计模式：一些通用的解决固定问题的方法
				1.装饰模式
				2.代理模式
					概念：
						1.真实对象：被代理的对象
						2.代理对象：
						3.代理模式：代理对象代理真实对象，达到增强真实对象功能的目的
					实现方式：
						1.静态代理：有一个类文件描述代理模式
						2.动态代理：在内存中形成代理类
							实现步骤：
								1.代理对象和真实对象实现相同的接口
								2.获取代理对象
									参数：
										1.ClassLoader
										2.接口
										3.处理器InvocationHandler
									代理对象 = Proxy.newProxyInstance(demo.getClass().getClassLoader(), demo.getClass().getInterfaces(),new InvocationHandler(){
										public Object invoke(Object proxy,Method method,Object[] args) throws Throwable{
											//代码逻辑编写的方法。代理对象调用的所有方法都会触发该方法执行
											return null;
											//参数：
											//1.proxy。代理对象。一般不用
											//2.method。代理对象调用的方法，被封装为的对象
											//3.args。代理对昂调用方法时，实际传递的参数
										}
									})
								3.使用代理对象调用方法
								4.增强方法
							增强方式：
								1.增强参数列表
								2.增强返回值
								3.增强执行过程
						
		
Listener：监听器
	概念：web的三大组件之一
		事件监听机制
			事件：一件事情
			事件源：时间发生的地方
			监听器：一个对象
			注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码
	ServletContextListener：监听ServletContext对象的创建和销毁
		void contextDestroyed(ServletContextEvent sce)：ServletContext对象被销毁之前会调用该方法
		void contextInitialized(ServletContextEvent sce)：ServletContext对象创建后会调用该方法
	<listener>
		<listener-class>cn.itcast.web.listener.ContextLoaderListerner</listener-class>
	</listener>