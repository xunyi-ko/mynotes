spring data jap
	day1:orm思想和hibernate以及jpa的概述和jpd的基本操作
	day2:springdatajpa的运行原理以及操作
	day3:多表操作，复杂查询

第一	orm思想
	主要目的：操作实体类就相当于操作数据库表
	建立两个映射关系：
		实体类和表的映射关系
		实体类中属性和表中字段的映射关系
	不再重点关注sql语句
	
	实现了orm思想的框架：mybatis和hibernate
	
第二	hibernate框架介绍
	hibernate是一个开源的对象关系映射框架
		它对JDBC进行了非常轻量级的对象封装
		它将POJO与数据库表建立映射关系，是一个全自动的orm框架
		
第三	JPA规范
	jpa规范，实现jpa规范，内部是由接口和抽象类组成
第四	jpa的基本操作
	案例：是客户的相关操作(增删改查)
		客户：就是一家公司
	客户表：
		i.搭建环境的过程
			1.创建maven工程导入坐标
			2.需要配置jpa的核心配置文件
				*位置：配置到类路径下META-INF文件夹下
				*命名：persistence.xml
				<?xml version="1.0" encoding="UTF-8">
				<persistence xmlns="http://java.xun.com/xml/ns/persistence" version="2.0">
					<!--
						配置persistence-unit节点
						持久化单元
							name：持久化单元名称
							transaction-type：事务管理的方式
								JTA：分布式事务管理
								RESOURCE_LOCAL：本地事务管理
					-->
					<persistence-unit name="myjpa" transaction-type="RESOURCE_LOCAL"
						<!--jpa的实现方式-->
						<provider>org,hibernate.jpa.HibernatePersistenceProvider</provider>
						
						<properties>
							<!--数据库信息
								用户名		javax.persistence.jdbc.user
								密码		javax.persistence.jdbc.password
								驱动		javax.persistence.jdbc.driver
								数据库地址	javax.persistence.jdbc.url
							-->
							<property name="javax.persistence.jdbc.user" value="root"></property>
							<property name="javax.persistence.jdbc.password" value="root"></property>
							<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver"></property>
							<property name="javax.persistence.jdbc.url" value="jdbc:mysql:///jpa"></property>
							<!--可选配置：配置jpa实现放的配置信息
								显示sql		hibernate.show_sql			false|true
								自动创建数据库表	hibernate.hdm2ddl,auto
									create	程序运行时创建数据库表(如果有表，先删除再创建)
									update	程序运行时创建数据库表(如果有表，不创建)
									none	不创建表
							-->
							<property name="hibernate.show_sql" value="true"></property>
							<property name="hibernate.hbm2ddl.auto" value="create"></property>
						</properties>
						
						
						
					</persistence-unit>
					
					
				</persistence>
			3.编写客户的实体类
			4.配置实体类和表，类中属性和表中字段的映射关系
				类注解
					@Entity：声明实体类
					@Table：配置实体类和表的映射关系
						name：配置数据库表的名字
				成员变量注解
					@Id
						声明主键
					@GeneratedValue	主键生成策略
						strategy
							GenerationType.IDENTITY	主键自增 需要支持自增	mysql
							GenerationType.SEQUENCE	序列	 需要支持序列	oracle
							GenerationType.Table	jpa提供的机制，完成主键自增
							GenerationType.AUTO		由程序自动选择生成策略
							
					@Column	配置属性和字段的映射关系
						name：对应的字段名
			5.保存客户到数据库中
		ii.完成基本CRUD案例
			jpa操作步骤
				1.加载配置文件，创建工厂对象
					EntityManagerFactory factory = Persistence.createEntityManageeFactory("myjpa");
				2.通过工厂获取实体管理器
					EntityManager em = factory.createEntityManage();
				3.开启事务
					em.getTransaction tx = em.getTransactioin();//获取事务对象
					tx.begin();//开启事务
				4.完成增删改查工作
					//merge：更新	传入对象用于更新，可以先查询对象，后更新
					em.merge(object);
					//remove：删除	根据id查询对象，后传入对象
					//find/getReference:根据id查询
					//find是立即加载	getReference是延迟加载
					em.find(Object.class,1);
					em.persist(object);//Object是要保存到数据库的对象
					
				5.提交或回滚事务
					tx.commit();//提交事务
				6.释放资源
					em.close();
					factory.close();
		iii.jpql	java persistence query language	用于复杂查询
			特征与原生SQL语句类似，并且完全面向对象，通过类名和属性访问，而不是表名和表的属性
			sql：查询的是表和表中的字段
			jpql：查询的是实体类和类中的属性
				sql和jpql语法相似
			String jpql = "from cn.itcast.domain.Customer";
			Query query = em.createQuery(jpql);
			//发送查询，并封装结果集
			List list = query.getResultList();
			1.查询全部
				String jpql = "from cn.itcast.domain.Customer";
			2.分页查询
				String jpql = "from cn.itcast.domain.Customer";
				Query query = em.createQuery(jpql);
				query.setFirstResult(0);//设置起始索引
				query.setMaxResult(5);//设置每页条数
				List list = query.getResultList();
			3.统计查询
				String jpql = "select count(custId)from cn.itcast.domain.Customer";
				Object result = query.getSingleResult();
			4.条件查询
				String jpql = "from cn.itcast.domain.Customer where custName like ?";
				//第一个参数是占位符的索引数，从1开始，第二个参数是值
				query.setParameter(1，"");
				
			5.排序
			String jpql = "from cn.itcast.domain.Customer order by ... desc";
			
SpringDataJpa概述
	spring基于ORM框架、JPA规范的基础上封装的一套JPA应用框架
	提供了包括增删改查在内的常用功能，易于扩展
SpringDataJpa入门操作
	i.搭建环境的过程
		创建工程导入坐标
		配置spring的配置文件
		编写实体类，使用jpa注解配置映射关系
	ii.编写一个符合springDataJpa的dao层接口
		只需要编写dao层接口，不需要编写实现类
			1.需要继承两个接口(JpaRepository,JpaSpecificationExecutor)
			2.需要提供相应的泛型
		方法
			findOne(int id);//根据id查询
			save(Object object);//如果传递的对象不存在主键id属性，则执行保存，如果有主键id，则执行更新
			del(int id);//根据id删除
			
			
SpringDataJpa的运行过程和原理剖析
	1.通过JDKDynamicAOPProxy的invoke方法创建了一个动态代理对象
	2.SimpleJpaRepository当中封装了JPA的操作(借助JPA的api完成数据库的CRUD)
	3.通过hibernate完成数据库操作(封装了jdbc)
复杂查询
	i借助接口中的定义好的方法完成查询
		findOne(id):根据id查询
		count():查询全部数量
		exists(id):查询是否存在
	ii.jpql的查询方式
		特点：语法或关键字和sql语句类似
			查询的是类和类中的属性
		需要将JPQL语句配置到接口方法上
			1.特有的查询：需要在dao接口上配置方法
			2.在新添加的方法上，使用注解的形式配置jpql查询语句
			3.注解：@Query(value="jpql") 用于查询操作
				如果是更新操作，需要添加@Modifying注解
					需要添加事务支持
						@Transaction//添加事务支持
						@Rollback(value="false")//不自动回滚
		对于多个占位符参数
			赋值的时候，默认的情况下，占位符的位置需要和方法参数中的位置保持一致
		可以指定占位符参数的位置
			？后加索引的方式，指定占位符的取值来源
		

