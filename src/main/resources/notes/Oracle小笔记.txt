oracle
	创建表空间
		create tablespace tsname
		datafile '表空间路径，以dbf为后缀'
		size 100m
		autoextend on	--当表空间不足时自动扩容
		next 10m;	--一次扩容10MB
	
	删除表空间
		drop tablespace tsname;
	
	创建用户
		create user username
		identified by password
		default tablespace tsname;
	
	给用户授权	oracle数据库中常用的角色
	connect--连接角色，基本角色
	resource--开发者角色
	dba--超级管理员角色
	grant dba to username;--授权
	
	数据类型			描述
	Varchar varchar2	表示一个字符串
	NUMBER				NUMBER(n)表示一个整数，长度是n
						NUMBER(m,n)表示一个小数，总长度是m，小数部分是n，整数部分是m-n
	DATA				日期类型	年月日时分秒
	CLOB				大对象，表示大文本数据类型，可存4G
	BLOB				大对象，表示二进制数据，可存4G
	
	创建一个person表
		create table perason(
			pid number(20),
			pname varchar2(10)
		);
	
	修改表结构
		添加一列
			alter table person add gender number(1);
		
		修改列类型
			alter table person modify gender char(1);
		
		修改列名称
			alter table person rename column gender to sex;
		
		删除一列
			alter table person drop column sex;
	
	数据的增删改	注意！增删改后要提交事务 commit;
		添加一条记录
			insert into person (pid,pname) values(1,'小明');
		
		修改一条记录
			updateperson set pname='小马' where pid=1;
		
		删除
			delete from person;	--删除表中全部记录
			drop table person;	--删除表结构
			truncate table person	--先删除表，再重新创建表，等同于删除所有记录
	
	序列：默认从1开始，一次递增，主要用来给主键赋值使用
		序列不属于任何一张表，但是可以逻辑和表做绑定
		create sequence s_person;
		select s_person.nextval from dual;	--dual:虚表，只是用来补全语法，没有任何意义
			--s_person.nextval为下一个数字
			--s_person.currval为当前数据
			添加记录时可以用
				insert into person(pid,pname)values(s_person.nextval,'name');
	
	scott用户，密码tiger
		解锁scott用户。需要超级管理员权限
			alter user scott account unlock;
		解锁密码[也可用于重置密码]
			alter user scott identified by tiger;
	
	单行函数：作用于一行，返回一个值
		字符函数
			select upper('aaa') from dual	--获得大写的字符串
			select lower('AAA') from dual	--获得小写的字符串
		数值函数
			select round(26.16,2)from dual	--四舍五入，后面的参数表示保留的小数位数，如果是负数，代表取整十整百对等。
			select trunc(26.16,1)from dual	--直接截取
			select mod(10,3)from dual		--求余数
		日期函数
			select sysdate from dual;	--查询当前时间
			select sysdate-e.hiredate from emp e;	--查询当前时间减去emp表的数据
		转换函数
			日期转字符串
				select ro_char(sysdate,'yyyy--mm--dd hh:mi:ss')from dual
				select ro_char(sysdate,'yyyy--mm--dd hh24:mi:ss')from dual	--24小时
				select ro_char(sysdate,'fm yyyy--mm--dd hh:mi:ss')from dual	--如果月、日是个位数，不显示0
			字符串转日期
				select to_date('2018-10-22','yyyy--mm--dd hh:mi:ss')from dual
		通用函数
			select nvl(e.comm,0) from emp e;	--如果e.comm是null，则为0
		条件表达式
			通用写法
				select e.ename,
					case e.ename
						when 'SMITH' then '史密斯'
						when 'ALLEN' then '艾伦'
						when 'WARD' then '沃德'
						else '无名'	--可以省略
						end
			from emp e;
			oracle专用写法
				oracle中除了起别名，都用单引号
				select e.ename
					decode(e.ename,
					'SMITH','史密斯',
					'ALLEN','艾伦',
					'WARD','沃德',
					'无名'--可以省略) "别名"--双引号可以省略
				from emp e;
	多行函数[聚合函数]：作用于多行，返回一个值
		数学表达式
			select count(*) from emp;	--统计
			select sum(sal) from emp;	--总和
			select max(sal) from emp;	--最大值
			select min(sal) from emp;	--最小值
			select avg(sal) from emp;	--平均值
	
	分组查询
		查询每个部门的平均工资
			select e.deptno,avg(e.sal)
			from emp e
			group by e.deptno;
		查询平均工资高于2000的部门信息
			select e.deptno,avg(e.sal) a
			from emp e
			group by e.deptno
			having avg(e.sal)>2000;	--a>2000是错的。所有条件都不能使用别名来判断
			
	多表查询中的一些概念
		笛卡尔积	同时查询多张表时，会把记录数相乘显示，导致出现无用数据
		等值连接
			select * 
			from emp e,dept d
			where e.deptno=d.deptno;
		内连接
			select * 
			from emp e inner join dept d
			on e.deptno=d.deptno;
		
		orcale中专用外连接
			select *
			from emp e,dept d
			where e.deptno=d.deptno(+);
			
			select *
			from emp e,dept d
			where e.deptno(+)=d.deptno;
		
		自连接
			select e1.ename,e2.name
			from emp e1,emp e2
			where e1.mgr = e2.empno;
		
		子查询	把查询语句作为查询条件
			select * from emp where sal in
			(select sal from emp were deptno=10);
		
		oracle中的分页
			rownum行号：当我们做select操作时，会自动出现行号。
				select rownum,e.* from emp e order by e.sal desc;
					排序，并显示行号。但是由于是先查询后排序，行号在排序前已经定了，所以行号是乱的
				select rownum,t.*
				from (select e,* from emp e order by e.sal desc) t;
					排序后再重新提供行号
			利用rownum进行分页查询
				select * from(
					select rownum rn,e.* from(
						select * from emp order by sal desc
					) e where rownum<11
				)where rn>5;
				用给rownum取别名的方式，在外层调用内层的rownum值
		
	视图：提供一个查询的窗口，所有数据来自原表
		用查询到的语句来创建一个表
			create table emp as select * from scott.emp;
		创建视图[必须有dba权限]
			create view v_emp as select ename,job from emp;
		创建只读视图
			create view v_emp1 as select ename,job from emp with read only;
		查询视图
			select * from v_emp;
		修改视图(不推荐)--等于修改原表
			update v_emp set job='CLERK' where ename='ALLEN';
			commit
		作用
			1.视图可以屏蔽掉一些敏感列
			2.保证总部和分布数据及时统一
	
	索引：就是在表的列上构建一个二叉树
		达到大幅度提高查询效率的目的，但是索引会影响增删改的效率
		单列索引
			create index idx_ename on emp(ename);
			单列索引触发规则：条件必须是索引的原始值
		复合索引
			create index idx_enamejob on emp(ename,job);
			复合索引第一列为优先检索列
			如果要触发复合索引，必须包含优先检索列中的原始值
	
	pl/sql编程语言	对sql预压的扩展，使得sql语言具有过程化编程的特性
		比一般的过程化编程语言更加灵活高效，主要用于编写存储过程和存储函数等
		
		声明方法
			declare
				i name(3) := 5;
			begin
			
			end;
			赋值
				:=
				select ename into name from emp where empno = 1;
			输出语句
				dbms_output.put_line(name);
			变量
				emp.ename%type	--引用型变量
				emp%rowtype		--记录型变量，存储一条记录
			oracle中字符串用||连接
			
		if表达式
			declare
				i name(3) := &n;
			begin
				if then
				
				elsif then
				
				else
				
				
				end if
			end;
			&代表输入
		
		循环
			while循环
				while 表达式 loop
					sql语句
				end loop
			exit循环
				loop
					exit when 表达式;
					sql语句
				end loop;
			for循环
				for i in 1..10 loop
					sql语句
				end loop;
		游标：可以存放多个对象，多行记录
			declare
				cursor c1 is select * from emp;
			begin
				open c1;	--可以带参数
					loop
						fetch c1 into emprow;	--c1放入emprow中，用于sql语句
						exit when c1%notfound;
					end loop;
				close c1;
			end;
			
			declare
				cursor c2(eno emp.deptno%type)
				is select empno from emp where deptno=eno;
				en emp.empno%type
			begin
				open c2(10);	--可以带参数
					loop
						fetch c2 into en;	--c1放入emprow中，用于sql语句
						exit when c2%notfound;
						update emp set sal=sal+100 where empno=en;
						commit;
					end loop;
				close c1;
			end;
		存储过程：提前已经编译好的一段pl/sql语言，
			放置在数据库端可以直接被调用。
			create [or replace] procedure 过程名称(参数 参数类型)
			AS		--等同于declare
			
			begin
				sql语句
			end
		
		存储函数
			create[or replace] function 函数名(参数 参数类型) return 数据类型 is
			
			begin
			
				return 结果变量;
			end 函数名;
			存储函数调用的时候，返回值需要接收
		
		触发器	就是制定一个规则，在我们做增删改操作时，满足规则时自动触发，无需调用
			语句级触发器
				create or replace trigger t1
				after
				insert
				on person
				declare
				begin
					dbms_output('新员工入职');
				end;
			行级触发器
				create or replace trigger t2
				before
				update
				on emp
				for each row
				declare
				begin
					if :old.sal>:new then
						raise_application_error(-20001,'错误提示信息');--[-20001到-20999之间]
					end if;
				end;
	
	java调用存储函数
		//注册驱动
		Class.forName("oracle.jdbc.driver.OracleDriver");
		//得到Connection连接
		Connection  conn = DriverManager.getConnection("jdbc:oracle:thin:@192.168.88.6:1521:orcl",root,root);
		//得到预编译的对象
		CallableStatement cs = conn.prepareCall("{call procedure(?,?)}");
		//给参数赋值
		cs.setObject(1,7788);
		cs.registerOutParameter(2,OracleTypes.NUMBER);
		//执行查询操作
		cs.execute();
		System.out.println(cs.getObject(2));
		//释放资源
		cs.close();
		conn.close();