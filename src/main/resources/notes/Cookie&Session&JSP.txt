Cookie&Session&JSP
会话技术
	1.会话：一次会话中包含多次请求和响应。
		一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到一方断开为止
	2.功能：在一次会话的范围内的多次请求间，共享数据
	3.方式：
		1.客户端会话技术：Cookie
		2.服务器端会话技术：Session
Cookie：
	1.概念：客户端会话技术，将数据保存到客户端
	2.快速入门：
		使用步骤：
			1.创建Cookie对象，绑定数据
				new Cookie(String name,String value)
			2.发送Cookie对象
				response.addCookie(Cookie cookie)
			3.获取Cookie，拿到对象
				Cookie[] request.getCookies()
	3.实现原理
		基于响应头set-cookie和请求头cookie实现
	4.cookie的细节
		1.一次可不可以发送多个cookie：可以，创建多个Cookie对象，并addCookie即可
		2.cookie在浏览器中保存多长时间：
			1.默认情况，在浏览器关闭后，Cookie数据被销毁
			2.持久化存储：
				setMaxAge(int seconds)
					正数：将Cookie数据写到硬盘的文件中。持久化存储。seconds即为存活的秒数
					负数：默认
					零：删除Cookie信息
		3.cookie可不可以存中文
			tomcat8后可以
			8前不能直接存储中文信息，需要将中文数据转码--一般采用URL编码
		4.cookie共享问题
			1.假设在一个tomcat服务器下，部署了不同的项目可以共享吗
				默认情况下，cookie只有同个项目才能获取
				setPath(String path):设置cookie的获取范围。默认情况下设置当前的虚拟目录
					如果要共享，则可以将path设置为"/"
			2.不同的tomcat服务器间cookie共享问题
				setDomain(String path)：如果设置一级域名相同，那么多个服务器之间cookie可以共享
					setDomain(".baidu.com")，那么tieba.baidu.com和news.baidu.com中的cookie可以共享
	5.Cookie的特点和作用
		1.cookie存储在客户端浏览器
		2.浏览器对于cookie的大小有限制(4k)，以及对同一个域名下的总cookie数量也有限制(一般不到20)
		作用：
			1.cookie一般用于存储少量的不太敏感的数据
			2.在不登录的情况下，完成服务器对客户端的身份识别
		
Session：
	1.概念：服务器端会话技术，再一次会话的多次请求间共享数据，将数据存储在服务器端的对象中。HttpSession
	2.快速入门
		HttpSession对象：
			1.获取
				HttpSession getSession()
			2.方法
				Object getAttribute(String name)获取数据
				void setAttribute(String name,Object value)设置数据
				void removeAttribute(String name)删除数据
	3.原理
		Session的实现是依赖于Cookie的
	4.细节
		1.当客户端关闭后，服务器不关闭，两次获取Session是否为同一个
			不是。默认情况下，会话已关闭。
			如果需要相同，可以创建Cookie，键为JSESSIONID，设置最大存活时间，让Cookie持久化保存
				Cookie c = new Cookie("JSESSIONID",session.getID());
				c.setMaxAge(86400);
				response.addCookie(c);
		2.客户端不关闭，服务器关闭后，两次获取的Session是同一个吗
			不是同一个
				session的钝化
					在服务器正常关闭之前，将session对象序列化到硬盘上
				session的活化
					在服务器启动后，将session文件转化为内存中的session对象
		3.session的失效时间
			1.服务器关闭
			2.session调用invalid()方法
			3.session默认失效时间。三十分钟
				选择性配置修改
				<session-config>
					<session-timeout>30</session-timeout>
				</session-config>
	5.session特点
		1.session用于存储一次会话的多次请求的数据，存在服务端
		2.session可以存储任意类型，任意大小的数据
		
		session与cookie的区别
		1.session存储数据在服务器端，cookie在客户端
		2.session大小没有限制，cookie有限制
		3.session数据安全，cookie不安全

JSP：快速入门
	1.概念：Java Servlet pages Java服务器端页面
		可以理解为一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码
		用于简化书写
	2.JSP本质是Servlet
	3.JSP的脚本：JSP定义JSP代码的方式
		1.<%代码%>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么
		2.<%!代码%>：定义的java代码，在jsp转换后的java类的成员位置。
		2.<%=代码%>：定义的java代码，会输出到页面上。输出语句可以定义什么，该脚本中就可以定义什么。
	4.JSP的内置对象：
		在jsp页面中不需要获取和创建，可以直接使用的对象
		jsp一共有9个内置对象
			request
			response
			out
		response的输出先于out的输出
1.JSP：
	1.指令
		作用；用于配置JSP页面，导入资源文件
		格式：
			<%@ 指令名称 属性名=属性值 &>
		分类
			page	：配置JSP页面的
				contentType：等同于response.setContentType()
					1.设置响应体的mime类型以及字符集
					2.设置当前jsp页面的编码(仅限高级IDE。如果是低级开发工具，需要pageEncoding)
				import：导包
				errorPage：当前页面发生异常后，会自动跳转到指定的错误页面
				isErrorPage：标识当前页面是否是错误页面
					true：是，可以使用内置对象exception
					false：否，不可以使用
			taglib	：导入资源
				一般用于引入标签库
				<%@ taglib prefix="" url="" %>
					prefix：前缀，自定义的
			include	：页面包含的。导入页面的资源文件
	2.注释
		<!-- -->只能注释html代码
		<%-- -->可以注释所有代码
	3.内置对象
		pageContext：	PageContext				当前页面共享数据
			可以获取另外八个对象
		request：		HttpServletRequest		一次请求访问的多个资源(转发)
		session：		HttpSession				一次会话的多个请求间
		application：	ServletContext			所有用户间共享数据
		response：		HttpServletResponse		响应对象
		page：			Object					当前页面(Servlet)的对象 this
		out：			JspWriter				输出对象，数据输出到页面上
		config：		ServletConfig			Servlet的配置对象
		exception：		Throwable				异常对象
2.MVC开发模式
	1.jsp演变历史
		1.早期只有Servlet，只能使用response输出标签数据，非常麻烦
		2.后来有jsp，简化了开发。但是过度使用jsp，会造成难以维护，难以分工的后果
		3.再后来，Java 的web开发，借鉴MVC开发模式，使得程序的设计更加合理
	2.MVC：
		1.M：Model，模型	JavaBean
			业务逻辑操作
		2.V：View，视图		JSP
			展示数据
		3.C：Controller，控制器	Servlet
			1.控制客户端的输入
			2.调用模型
			3.将数据给视图展示
		优缺点
			优点：
				1.耦合性低，方便维护，有利于分工合作
				2.重用性高
			缺点：
				1.使得项目的架构变得复杂，对开发人员难度更高
3.EL表达式
	1.概念：Expression Language 表达式语言
	2.作用：替换和简化jsp页面中java代码的编写
	3.语法：${表达式}
	4.注意：
		jsp默认支持el表达式，如果想要忽略el表达式
			1，设置jsp中page的属性 isELIgnored="true"忽略当前jsp页面中所有的el表达式
			2.\${表达式}：将$转义，忽略此el表达式
	5.使用：
		1.运算
			运算符
				1.算数运算符：+ - * / (div) %(mod)
				2.比较运算符
				3.逻辑运算符
				4.空运算符：empty
					功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0
		2.获取值
			1.el表达式只能从域对象中获取值
			2.语法：
				1.${域名称.键名}：从指定域中获取指定键的值
					域名称：
						1.pageScope		pageContext
						2.requestScope	request
						3.sessionScope 	session
						4.applicationScope	application(ServletContext)
					举例：在request域中存储了name=张三
					获取：${requestScope.name}
				2.${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止
				3.获取对象、List集合、Map集合的值
					1.对象
						${域名称.键名.属性名}
					2.List集合：
						${域名称.键名[索引]}
					3.Map集合：
						${域名称.键名.key值} 或 ${域名称.键名["key值"]}
		3.隐式对象：
			el表达式中有11个隐式对象
			pageContext：
				可以获取8种内置对象
					${pageContext.request.contextPath}：动态获取虚拟目录
4.JSTL标签
	1.概念：JavaServer Pages Tag Library JSP标准标签库
		是由Apache组织提供的开源的免费的jsp标签
	2.作用：用于简化和替换jsp页面上的Java代码
	3.使用步骤
		1.导入jstl相关jar包
		2.引入标签库：taglib指令
		3.使用标签
	4.常用的JSTL标签
		1.if
			必须有test属性。内容为boolean表达式
				表达式如果为true，则显示标签体内容
				一般情况下test属性结合el表达式一起使用
			注意：
				c:if标签没有else情况，想要else情况，则可以再定义一个c:if标签
		2.choose
			如：
				<c:choose>
					<c:when test="boolean表达式">标签体</c:chose>
					<c:when test="boolean表达式">标签体</c:chose>
					<c:when test="boolean表达式">标签体</c:chose>
					<c:otherwise>不属于以上情况</c:otherwise>
				</c:choose>
		3.foreach
			属性
				begin	开始值
				end		结束值
				step	步长
				var		临时变量
				varStatus	循环状态变量
					index	容器中元素的索引值，从0开始
					count	循环次数，从1开始
	5.练习
		需求：在request域中有一个存有User对象的List集合。
			需要使用jstl+el将List集合数据展示到jsp页面的表格table中
				
5.三层架构：软件设计架构
	1.界面层(表示层)：用户看的界面。用户可以通过界面上的组件和服务器进行交互
	2.业务逻辑层：处理业务逻辑的
	3.数据访问层：操作数据存储文件
	