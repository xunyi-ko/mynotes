对于对象的私有数据，不要轻易采用自动添加getter、setter的方式
不要随意的暴露数据细节，而是以抽象形态表述数据。不只是用接口或getter、setter就完事儿了。

// 具体机动车
public interface Vehicle{
  double getFuelTankCapacityInGallons();
  double getGallonsOfGasoline();
}
// 抽象机动车
public interface Vehicle{
  double getPercentFuelRemaining();
}
以上两种方式，对象把数据隐藏于抽象之后，暴露操作数据的函数。数据结构暴露其数据，没有提供有意义的函数。
两者本质对立。

    面向过程代码便于在不改动既有数据结构的前提下添加新函数
        面向过程代码添加新的数据结构的话就必须修改所有函数
    面向对象代码便于在不改动既有函数的前提下添加新类
        面向对象代码添加新函数的话就必须修改所有类
    两者各擅胜场

迪米特原则
    一个对象应该对其他对象有最少的了解，一个类只需要知道自己需要耦合或者调用类的public方法即可
        如上面所说，对象隐藏数据，暴露操作。这意味这对象不应通过存取器暴露其内部结构。
    更准确的说，迪米特原则认为，类C的方法f只应该调用以下对象的方法
        1.C的内部方法
        2.由f创建的队形的方法
        3.作为参数传递给f的对象的方法
        4.由C的实体变量持有的对象
    方法不应调用由任何函数返回的对象的方法。换言之，只和朋友谈话，不与陌生人谈话
    
    如果需要O1调用函数A获取到的对象O2来调用它的函数B，不如试着将函数B直接放在O1类中，这样就可以避免违反迪米特原则
    
数据传送对象
    最精炼的数据结构是一个只有公共变量，没有函数的类。这种数据结构有时被称为数据传送对象或者DTO(常用的存取数据库数据的对象)
    
小结
    对象暴露行为，隐藏数据。便于添加新对象类型而无需修改既有行为，同时也难以在既有对象中添加新的行为
    数据结构暴露数据，没有明显的行为。其他与以上正好相反
    在任何系统中，我们需要灵活地运用以上两种类型的对象
    
    总的来说，就是想清楚，一个对象应该做什么。是一个单纯的DTO，就暴露数据；是一个操作对象，就隐藏数据，暴露行为
