错误处理是编程时必须要做的事之一，当错误发生时，程序员有责任确保代码照常工作
错误处理很重要，但如果它搞乱了代码逻辑，就是错误的做法

1.使用异常而非返回码
    在很久以前，许多语言不支持异常，这些语言处理和汇报错误的手段有限。要么设置一个错误标识，要么返回错误码
    这种方式的问题在于，它们搞乱了代码。调用者必须在调用之后即刻检查错误。然而这个步骤很容易被遗忘
    最好在遇到错误时抛出一个异常。
    
2.先写try-catch-finally
    异常的好处之一是，它们在程序中定义了一个范围，执行try-catch-finally语句中try部分的代码时，表明了代码随时可能取消执行，并在catch语句中接续
    
3.使用运行时异常
    Java的第一个版本中引入编译期异常，如果没有抛出，则无法运行。但是它并不是必须的。我们得确定编译期异常是否值得
    
    编译期异常的代价就是违反开闭原则。乳沟在方法中抛出可控异常，那么久必须在每个方法之间声明该异常
    这意味着较低层级的修改，都将波及到较高层级。具体情况具体分析吧
    
4.给出异常发生的环境说明
    抛出的每个异常，都应当提供足够的环境说明，以便判断错误的来源和处所。
    在Java中，我们可以在任何异常里得到堆栈的踪迹，但是堆栈的踪迹无法告诉你该失败操作的原因
    写上足够清晰的内容，以便查找异常
    
5.依调用者需要定义异常类
    对于错误分类有很多方式，可以依其来源分类，类型分类等等。不过最重要的，是考虑清楚它们如何被捕获
