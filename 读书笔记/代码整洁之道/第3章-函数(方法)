函数的第一规则就是要短小，第二条规则还是要更短小。足够短小的函数，可以清晰的展现它的目的，每个函数只做一件事，这才是函数该做的

代码块和缩进
    if、else、while语句等，其中的代码应该只有一行，该行大抵应该是一个函数调用语句，这样不但能保持函数短小，
    而且块内调用的函数具有较具说明性的名称，从而增加了文档的价值
    这也意味着函数不应该达到足以容纳嵌套结构，所以函数的缩进层级不应该多于两层
    
只做一件事
    一个函数应该只做一件事，但是这比较难以区分，因为“一件事”很难定义。
    我们可以换一个说法：看我们能否从一个函数中再拆出一个函数。
    
每个函数一个抽象层级
    要确保函数只做一件事，函数中的语句都要在同一个抽象层级上。
    
使用描述性的名称

函数的参数
    最理想的函数参数个数是零个，其次是一个，再次是两个，应尽量避免三个或以上的参数，除非有足够的理由这么做

动词和关键字
    给函数取个好名字，能较好地解释函数的意图，以及参数的顺序及意图
    
分隔指令
    在写函数时，最好把做事和判断分开，防止混淆

使用异常替代返回错误码
    跳异常会使代码直接跳出原有代码，减少了许多的嵌套结构
    
抽离try...catch...代码块
    一个函数应该只做一个事，try...catch...就是一件事
    
返回错误码通常需要一个类或是枚举，定义了所有的错误码，那么许多其他的类都需要引入它，那么当这个类修改时，所有的这些类都要重新编译部署
如果使用异常代替，新的异常就可以从异常类派生，无需重新编译或部署

别重复自己
    当一段代码重复超过四次，就说明应该重写了
    尽量抽出重复的部分，提高代码的重用性
    这样在有修改的时候，也只需改动一处，而不是到处寻找哪里需要修改
    而且对于代码的可读性有了很大的提高
    
结构化编程
    有的程序员遵循每个函数、函数中的代码块都应该有一个入口，一个出口。
    遵循这个规则意味着每个函数中只该有一个return，循环中不能有break或continue
    但是这对于小函数用处不大
    保持函数的短小，保持函数的可读性，更加重要
