// 给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。
// s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
		TreeNode node;
        // 由于树中可能存在相同的值，所以要多次查询。为了避免找到同一个节点，如果失败的话，就把值+1
		while((node = findNode(s, t.val)) != null){
			if(checkEquals(node.left, t.left) && checkEquals(node.right, t.right)){
				return true;
			}
			node.val = node.val + 1;
		}
		return false;
    }
    // 判断两个子树是否完全相同
	public boolean checkEquals(TreeNode s, TreeNode t){
		if(s == null && t == null)
			return true;
        if(s == null || t == null)
			return false;
        if(s.val == t.val)
			return checkEquals(s.left, t.left) && checkEquals(s.right, t.right);
		
		return false;
	}
    // 找到和子树值相同的节点
	public TreeNode findNode(TreeNode root, int val){
		if(root != null){
			if(root.val == val){
				return root;
			}else{
				TreeNode node;
				node = findNode(root.left, val);
				if(node != null){
					return node;
				}else{
					return findNode(root.right, val);
				}
			}
		}
		return null;
	}
}

// 优化
// 执行用时 : 9 ms, 在所有 Java 提交中击败了 95.70% 的用户
// 内存消耗 : 38.1 MB, 在所有 Java 提交中击败了 98.80% 的用户
class Solution{
	public boolean isSubtree(TreeNode s, TreeNode t) {
		// 从这里迭代，避免了findNode()方法重复查询同一块区域
        if(s == null)
			return false;
		if(s.val == t.val){
			if(checkEquals(s.left, t.left) && checkEquals(s.right, t.right)){
				return true;
			}
		}
		return isSubtree(s.left, t) || isSubtree(s.right, t);
    }
	public boolean checkEquals(TreeNode s, TreeNode t){
		if(s == null && t == null)
			return true;
        else if(s == null || t == null)
			return false;
        else if(s.val == t.val)
			return checkEquals(s.left, t.left) && checkEquals(s.right, t.right);
		else
		    return false;
	}
}
