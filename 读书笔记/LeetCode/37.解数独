// 编写一个程序，通过已填充的空格来解决数独问题。

// 一个数独的解法需遵循如下规则：

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
// 空白格用 '.' 表示。

class Solution {
    final int n = 3;
	final int N = 9;
	final int maxLength = 8;
	int[][] row = new int[N][N];
	int[][] col = new int[N][N];
	int[][] box = new int[N][N];
	
	char[][] board;
	boolean flag = false;
	
	public void solveSudoku(char[][] board) {
		this.board = board;
		
        // 填充row、col、box
		for(int i = 0; i < N; i++){
			for(int j = 0; j < N; j++){
				if(board[i][j] == '.');
				else{
					placeNum(i, j, board[i][j] - '1');
				}
			}
		}
		
        // 开始尝试
		doPlaceNum(0, 0);
    }
	
	private void doPlaceNum(int x, int y){
        // 如果当前位置是空的，就尝试放一个值
		if(board[x][y] == '.'){
			tryPlaceNum(x, y);
		}else{
            // 否则，尝试下一个位置。直到最后一个位置也有数时，数独填充完成
            if(x == maxLength && y == maxLength){
                flag = true;
                return;
            }
			doPlaceNum((x + 1) % N, (x + 1) / N + y);
		}
	}
	
	private void tryPlaceNum(int x, int y){
		for(int i = 0; i < N; i++){
			if(couldPlace(x, y, i)){
                // 尝试填充i
				placeNum(x, y, i);
                if(x == maxLength && y == maxLength){
					flag = true;
					return;
				}
                // 填充下一个位置
				doPlaceNum((x + 1) % N, (x + 1) / N + y);
				
                // 到这一步时，如果flag还是false，说明这个位置填充的数时错的，就移除这个值
                // 如果是true，则退出循环
				if(flag) return;
				removeNum(x, y);
			}
		}
	}
	private void placeNum(int x, int y, int c){
		int idx = x / n * n + y / n;
		
		row[x][c] = 1;
		col[y][c] = 1;
		box[idx][c] = 1;
		board[x][y] = (char) (c + '1');
	}
	
    // 判断同行、同列、同小格中是否有相同的数。
	private boolean couldPlace(int x, int y, int c){
		int idx = x / n * n + y / n;
		return row[x][c] == 0 && col[y][c] == 0 && box[idx][c] == 0;
	}
	
	private void removeNum(int x, int y){
		int c = board[x][y] - '1';
		int idx = x / n * n + y / n;
		
		row[x][c] = 0;
		col[y][c] = 0;
		box[idx][c] = 0;
		board[x][y] = '.';
	}
}
