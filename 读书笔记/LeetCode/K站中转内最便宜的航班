public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        // K+2是因为j要从1开始，最大的时候又必须有K+1个数
        int[][] dp = new int[n][K + 2];
        for(int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        // 所有出发点的费用自然都是0
        Arrays.fill(dp[src], 0);
        for(int j = 1; j <= K + 1; j++) {
            for(int[] flight : flights) {
                // 从费用不是最大的值开始找
                // 最开始就是从src开始
                if(dp[flight[0]][j - 1] != Integer.MAX_VALUE) {
                    // 中转j次的费用等于去前一站中转j-1次的费用加上此次航班的费用
                    // 由于可能有多种可能性，所以要取出已有数据，对比，取较小的值
                    dp[flight[1]][j] = Math.min(dp[flight[1]][j], dp[flight[0]][j - 1] + flight[2]);
                }
            }
        }
        return dp[dst][K + 1] == Integer.MAX_VALUE ? -1 : dp[dst][K + 1];
    }
