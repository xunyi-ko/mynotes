给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，
计算按此排列的柱子，下雨之后能接多少雨水。
我的解法
两端各有一个指针，让高度小的向高的移动，记录低的值
如果移动后的更高，就把最低值改为两个当前指针中低的值
如果移动后的位置更低，就可以蓄lower-当前的值。直到两者只相隔一个位置，移动结束
class Solution {
    public int trap(int[] height) {
        int water = 0;
        int rightPtr = height.length - 1;
        int leftPtr = 0;
        if(rightPtr < 2) {
        	return 0;
        }
        int lower = Math.min(height[leftPtr],height[rightPtr]);
        while(leftPtr < rightPtr - 1) {
        	if(height[leftPtr] < height[rightPtr] && lower > height[++leftPtr) {
        			water += lower - height[leftPtr];
        	}else if(height[leftPtr] >= height[rightPtr] && lower > height[--rightPtr]){
        			water += lower - height[rightPtr];
        	}
          lower = Math.min(height[leftPtr],height[rightPtr]);
        }
        return water;
    }
}

以下是别人的解法
class Solution {
    public int trap(int[] height) {
        return trap(height,0);
    }

    public int trap(int[] height,int left){
        int ans = 0;
        if(left >= height.length){// 递归截止条件
            return ans;
        }
        int first = height[left];
        int second = 0;
        int second_index = -1;
        int index = left + 1;
        while(index < height.length && first >= height[index]){// 尽量找到比height[left]大的值
            if(second <= height[index]){// second表示比height[left]小，但是在经过的数字中最大
                second = height[index];
                second_index = index;
            }
            index++;
        }
        if(index < height.length){// 找到比height[left]大的值
            ans = (index - left - 1) * height[left];// 先算总的长 X 宽
            for(int i=left+1;i<index;i++){// 再减去中间的方块
                ans -= height[i];
            }
            return ans + trap(height,index);// 递归找index位置开始的子数组接到的雨水
        }
        if(second_index == -1){// 没有比height[left]小的最大值
            return 0;
        }
        ans = (second_index - left - 1) * height[second_index];// 思路同上，只是小的数变成height[second_index]
        for(int i = left + 1;i < second_index; i++){
            ans -= height[i];
        }
        return ans + trap(height,second_index);
    }
}
