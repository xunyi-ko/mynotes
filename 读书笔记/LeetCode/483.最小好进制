
// 有点极端
// 执行用时 :60 ms, 在所有 Java 提交中击败了7.69%的用户
// 内存消耗 :35.3 MB, 在所有 Java 提交中击败了100.00%的用户
class Solution {
    public String smallestGoodBase(String n) {
		long v = Long.valueOf(n);
		long i = 2;
		int weishu = 8;
		int num = Math.max(100,(int)(Math.pow(v, (double) 1/weishu) + 1));
        for(; i < num; i++){
			if(divide(v, i))
				return String.valueOf(i);
		}
		
		for(int j = weishu; j > 2; j--){
			long left = (int)(Math.pow(v, (double) 1/j) + 1);
			long right = (int)(Math.pow(v, (double) 1/(j - 1)) + 1);
			System.out.println(right);
			System.out.println(left);
			while(left < right){
				long mid = (right + left) >>> 1;
				long value = calcValue(mid, j);
				System.out.println(mid);
				if(value == v){
					return String.valueOf(mid);
				}else if(value > v){
					right = mid-1;
				}else{
					left = mid+1;
				}
			}
		}
		return String.valueOf(v - 1);
    }
	
	public long calcValue(long v, int nums){
		long res = 1;
		for(int i = 1; i < nums; i++){
			res = res * v + 1;
		}
		System.out.println("res : " + res);
		return res;
	}
	public boolean divide(long n, long x){
		n--;
		while(n != 0){
			if(n % x != 0){
				return false;
			}else{
				n = n / x;
				n--;
			}
		}
		return true;
	}
}
