Spring
	spring框架的概述以及spring中基于XML的IOC配置
	spring中基于注解的IOC和ioc的案例
	spring中aop和基于XML以及注解的AOP配置
	spring中的JdbcTemplate以及Spring事务控制
	
	spring的概述
		spring是分层的JavaSE/EE应用full-stack轻量级开源框架
		以IoC(Inverse Of Control 反转控制)和AOP(Aspect Oriented Programming 面向切面编程)为内核
		提供了展现层SpringMVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术
		还能整合开源世界众多著名的第三方框架和类库，是使用最多的JavaEE企业应用开源框架
		
		spring的优势
			方便解耦，简化开发
			AOP编程的支持
			声明式事务的支持
			方便程序的测试
			方便继承各种优秀框架
			降低JavaEEAPI的使用难度
			Java源码是经典学习范例
		spring的体系结构
	
	
	IOC用于解耦
		导入依赖
			spring-context
			
			//获取核心容器对象
			ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");
			//根据id获取Bean对象
			AccountService as = (AccountService)ac.getBean("accountService");
	ApplicationContext:单例对象适用
		在构建核心容器时，创建对象采取的策略是立即加载
	BeanFactory：多例对象适用
		在构建核心容器时，创建对象采取的策略是延迟加载
		
	IOC中创建Bean对象的三种方式
		1.使用默认构造函数创建
			<bean id="" class=""></bean>
		2.使用普通工厂中的方法创建对象
			<bean id="" factory-bean="" factory-method=""></bean>
		3.使用工厂中的静态方法创建对象
			<bean id="" class="" factory-method=""></bean>
			
	依赖注入
		构造函数注入
			使用的标签：constructor-arg
			标签出现的位置：bean标签的内部
			标签的属性
				type：用于指定要注入的数据类型
				index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置从0开始
				name：用于指定给构造函数中指定名称的参数赋值
				--------以上三个用于指定给构造函数中哪个参数赋值-------多用name
				value：参数的值
				ref：引用参数的值，需要另写一个bean，引用其id
				
		set注入
			name：用于指定给构造函数中指定名称的参数赋值
			value：参数的值
			ref：引用参数的值，需要另写一个bean，引用其id
			<bean>
				<property name="" value=""></property>
			</bean>
		
		复杂注入
			<bean id="" class="">
				<property name="">
					<array>	--list或set，相同结构的标签可以互换
						<value>aaa</value>
					</array>
				</property>
				<property name="mymap">
					<props>
						<prop key="t1">test1</prop>
						<prop key="t2">test2</prop>
					</props>
				</property>
			</bean>
			
			
			
			
			AOP
				导入
					aspectjweaver
				配置AOP
					1.把通知Bean交给spring管理
					2.使用aop:config标签表明开始对AOP的配置
					3.使用aop:aspect标签表明配置切面
						id属性：给切面提供一个唯一标识
						ref属性：是指定通知类bean的ID
					4.在aop:aspect标签的内部使用对应标签来配置通知的类型
						示例使用printLog方法在切入点方法执行之前，所以前置通知
						aop:before	标识配置前置通知
							method属性：用于指定类中哪个方法是前置通知
							pointcut属性：用于指定切入点表达式，指对业务层中哪些方法增强
						表达式的写法
							关键字：execution(表达式)
							表达式：
								访问修饰符 返回值 包名.包名.类名.方法名(参数类型)
							如
								public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
					<aop:config>
						<aop:aspect id="" ref=""></aop:aspect>
					</aop:config>
					通知类型
						before	方法执行前
						after-returning	方法执行后
						after-throwing	报错后
						after	完全结束后
					环绕通知
						xml：<aop:around method="" pointcut="">
						注解：@Arount("pointcut")
						public Object aroundAdvice(ProceedingJoinPoint pjp){
							Object rtValue = null;
							try{
								//1.获取参数
								Object[] args = pjp.getArgs();
								//2.开启事务
								this.beginTransaction();
								//3.执行方法
								rtValue = pjp.proceed(args);
								//4.提交事务
								this.commit()
							}catch(Throwable t){
								//5.回滚事务
								this.rowback();
								new RuntimeException;
							}finally{
								//6.释放资源
								this.release();
							}
						}
					<aop:pointcut>标签可以定义pointcut属性，用于引用，需要pointcut-ref属性
				事务管理
					基于xml的声明式事务控制配置步骤
						1.配置事务管理器
							<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
								<property name="dataSource" ref="dataSource"></property>
							</bean>
						2.配置事务的通知
							此时需要导入事务的约束 tx名称空间和约束，同时也需要aop的
							使用tx:advice标签配置事务通知
								属性：
									id：给事务通知起一个唯一标识
									transaction-manager：给事务通知提供一个事务管理器引用
							<tx:advice id="txAdvice" transaction-manager="transactionManager"></tx:advice>
						3.配置AOP中的通用切入点表达式
							
						4.建立事务通知和切入点表达式的对应关系
							<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1">
						5.配置事务的属性
							是在事务的通知tx:advice标签内部
								属性
									isolation：用于指定事务的隔离级别，默认值是DEFAULT，表示使用数据库的默认隔离级别
									propagation：用于指定事务的传播行为，默认值是REQUIRED，表示一定会有事务，增删改的选择。查询可以选择SUPPORTS
									read-only：用于指定事务是否只读，只有查询方法可以设置为true。默认false
									timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。以秒为单位
									rollback-for：用于指定一个异常，当产生该异常时事务回滚，其他异常不回滚。没有默认值，表示所有异常都回滚
									no-rollback-for：与上面相反
								<aop:attributes >
									<aop:method name=""/>
								<aop:attributes>
								
								
								
								
								
								
								
								
								
	注解
		XML配置方式
		<bean id="accountService" class="cn.xunyi.service.impl.AccountServiceImpl"
			scope="" init-method="" destroy-method="">
			<property name="" value=""|ref=""></property>
		</bean>
		
		开启spring对注解AOP的支持
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
		开启注解扫描器
		<context>:component-scan base-package="cn.xunyi"></context:component-scan>
		@ContextConfiguration(location="classpath:bean.xml")
		用于创建对象的
			作用和编写<bean>标签一样
			@Component
				把当前类对象存入spring容器中
					value属性等同于id，不写时默认当前类名
			@Controller	一般用于表现层
			@Service	一般用于业务层
			@Repository	一般用于持久层
				作用和属性与Component是一模一样的
				这三个是spring框架为我们提供明确的三层使用的注解，使三层对象更加清晰
		用于注入数据的
			和<property>标签一样
			@Autowired
				作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配
					如果没有匹配就报错
					如果多个匹配，根据变量名
						如果有一样的，就取名字一样的
						如果没有一样的，就报错
				作用位置：可以是方法上，也可以是变量上
			@Qualifier
				作用：在按照类中注入的基础上，再按照名称注入。在给类成员注入时不能单独使用。但是在给方法参数注入时可以
				属性：
					value:用于指定注入bean的id
			@Resource
				作用：直接按照bean的id注入。可以独立使用
				属性：
					name：用于指定注入bean的id
			---------------以上三个只能注入bean类型的数据，不能注入基本类型和String类型-------------
			---------------集合类型的注入只能通过XML实现------------------------
			@Value
				作用：用于注入基本类型和String类型
				属性：
					value：用于指定数据的值。可以使用spring中SpEL(也就是spring的el表达式)
						SpEL的写法：${表达式}
		用于改变作用范围的
			和scope属性一样
			@Scope
				作用：指定bean的作用范围
				属性：
					value：
						singleton：单例
						prototype：多例
						默认单例
		和生命周期相关的(了解)
			和init-method 和 destroy-method属性一样
			@PreDestroy
				作用：用于指定销毁的方法
			@PostConstruct
				作用：用于指定初始化的方法
				
		