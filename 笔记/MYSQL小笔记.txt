MYSQL的SQL语句
	SQL：Structure Query Language 结构化查询语言
		定义了操作所有关系型数据库的规则。每种数据可操作的方式存在不一样的地方
	DDL：数据定义语言：定义数据库，数据表它们的结构：
		create(创建)
		drop(删除)
		alter(修改)
	DML：数据操纵语言：主要用于操作数据
		insert(插入)
		update(修改)
		delete(删除)
	DCL：数据控制语言：定义访问权限，取消访问权限，安全设置
		grant
	DQL：数据查询语言：
		select(查询)
		from 子句 where 子句

登陆
	1.mysql -uroot -p密码
	2.mysql -hip -uroot -p密码
	3.mysql --host=ip --u=root --password=密码
退出
	1.exit
	2.quit

注意事项
	databases中，information_schema/performance_schema/mysql不能动

数据库语句
	创建数据库
		create database dbname;创建一个数据库
		create datebase character set utf8 collate utf8_bin;
			创建一个采用utf8字符集、utf8_bin校对规则的数据库
	查看语句
		show databases;	查看所有数据库
		show create dbname;	可以查看数据库的创建语句
	修改
		alter datebase dbname character set utf8;
			将数据库采用的字符集修改为utf8
	删除数据库
		drop database dbname;
	切换数据库
		use dbname;		转到dbname数据库
	查看当前数据库
		select database();

表语句
	创建表
		create table tname(
			列名  列类型  约束，
			列名  列类型  约束
			);

	列的类型
	java		sql
	int			int
	char/string	char/varchar	varchar后小括号内代表最大长度
	double		double	小数类型，加小括号，两个数字用逗号隔开，代表数据位数和小数位数(5,2)
	float		float
	boolean		boolean
	date		date
				time
				datetime	默认为null
				timestamp	默认为当前时间
				text		主要用于存放文本
				blob		存放二进制
	列的约束
		主键约束：primary key
		唯一约束：unique
		非空约束：not null
		外键约束：foreign key
		
		非空约束
			1.创建表时添加约束
			2.修改列时，添加约束
				ALTER TABLE student modify name VARCHAR(32) not null;
			3.修改表时，删除约束
				ALTER TABLE student modify name VARCHAR(32);
		唯一约束
			1.创建表时添加约束
			2.ALTER TABLE student DROP INDEX phone_number //删除唯一约束
			3.ALTER TABLE student MODIFY phone_number VARCHAR(32) unique;
		主键约束
			1.创建表时添加约束
			2.删除主键
				ALTER TABLE student DROP PRIMARY KEY;
			3.创建完表后，添加主键
				ALTER TABLE student MODIFY id INT PRIMARY KEY;
			自动增长
				1.创建表时添加自动增长
					CREATE TABLE student(
						id INT PRIMARY KEY AUTO_INCREMENT,
						NAME VARCHAR(32)
					);
				2.删除自动增长
					ALTER TABLE student MODIFY id INT PRIMARY KEY;
				3.删除自动增长
					ALTER TABLE student MODIFY id INT PRIMARY KEY AUTO_INCREMENT;
		外键约束
			创建表时添加
				格式
					constraint 外键名称 foreign key (列名) reference 主表名(列名)
			删除外键
				ALTER TABLE 表名 drop foreign 外键名
			添加外键
				ALTER TABLE 表名 ADD constraint 外键名称 foreign key (列名) reference 主表名(列名)
			设置级联
				级联更新	constraint 外键名称 foreign key (列名) reference 主表名(列名) on update cascade
				级联删除	constraint 外键名称 foreign key (列名) reference 主表名(列名) on delete cascade
	创建表的例子
		create table student(
			sid int primary key,
			sname varchar(31),
			sex int,
			age int
			);
	
	查看表
		show tables;	查看当前数据库下的所有表
		show create table tname;	查看表的创建过程
		desc student;	查看表的结构
	修改表
		添加列
			alter table tname add 列名 列的类型 约束
			alter table student add chengji int not null;
		修改列
			alter table student modify sex varchar(2);
				将sex列的列的类型改为varchar(2)(长度为2的字符串)
		修改列名
			alter table student change sex gender varchar(2);
				将列名由sex改为gender
		删除列
			alter table student drop chengji;
		修改表名
			rename table student to teacher;
			alter table student rename to teacher;
		修改表的字符集
			alter table teacher character set gbk;
				将表的字符集改为gbk
		删除表
			drop table teacher;
	表中数据的操作
		插入数据
			insert into tname(列名1，列名2，列名3...)values(值1，值2，值3...) 
				如果插入全列数据，列名可以省略
			insert into tname values(值1，值2，值3...)，(...);
				可以在一条语句中插入多条数据
		删除数据
			DML delete from tname where ...
			DDL truncate table tname;删除表后再创建空表
		修改数据
			update tname set 列名1=值1，列名2=值2 where ...
		查询数据
			select [distinct]字段列表 from tname where ...
				where后跟条件
			distinct :去除完全重复的语句(显示的数据中)
			*号代表所有字段列表
			举例
				SELECT NAME,math,english,math+IFNULL(english,0) AS 总分 FROM student;
					从student表中查询NAME,math,english三列的内容，
					并添加一列数学成绩与英语成绩之和。如果英语成绩为null，则用0代替。
					并将math+IFNULL(english,0)列列名改为总分。AS可以省略
			运算符号
				>,<,>=,<=,!=,=
				&&,||,!,and,or,not
				is null,is not null
				like	select * from student where name like ""//_代表一个字符，%代表一个或多个字符
			排序查询
				order by 子句	加在where前
					子句	排序字段 排序方式,排序字段 排序方式
				ASC为升序，DESC为降序
					默认为升序
			聚合函数：将一列数据作为一个整体，进行纵向的计算，排除null
				1.count：计算个数
				2.max：计算最大值
				3.min：计算最小值
				4.sum：计算和
				5.avg：计算平均值
				举例
					select max(math) from student;
			分组查询
				举例
					select sex,max(math),avg(math) from student group by sex;
						select from间只能有分组字段或者聚合函数。
						分组前可以对数据进行筛选
			分页查询
				select * from student limit 0,3;
				前一个数是指索引，后一个数指每一页显示的条数

范式
	第一范式：每一列都是不可拆分的原子性的属性
	第二范式：在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）
	第三范式：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）

数据库备份和还原
	命令行方式：
		备份：mysqldump -u用户名 -p密码 > 路径
		还原：1.登陆数据库	2.创建数据库	3.使用数据库	4.执行文件 source 文件路径
		
多表查询
	内连接
		隐式：用where筛选
		显式：select 字段列表 from 表1 [inner] join 表2 on 条件;
	外连接
		外连接
			左外连接：
				select 字段列表 from 表1 left join 表2 on 条件
			右外连接：
				类似，left改成right
	子查询：查询中嵌套查询
		举例：select * from emp where emp."salary" = (select max(salary) from emp);
		子查询是单行单列时，可以作为数据进一步查询
		多行单列，可以用in关键字，进一步查询
		多行多列，可以作为虚拟表，进行查询
		select
			t1.name,
			t1.mgr,
			t2.id,
			t2.name
		from emp1 t1
		left join emp t2
		on t1.mgr = t2.id;
			emp表自关联，用取别名的方式
			左外连接，查询包括null数据

事务
	1.事务的基本介绍
		1.概念；如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败
		2.操作：1.开启事务start transaction；2.回滚rollback；3.提交commit
		MySQL DML语句默认自动提交
		可以设置@@autocommit，1为自动提交，0为手动提交
	2.事务的四大特征
		1.原子性(不可分割的最小操作单位)
		2.持久性：事务提交或者回滚后，数据库会持久化的保存数据
		3.隔离性：多个事务之间，相互独立
		4.一致性：事务操作前后数据总量不变
	3.事务的隔离级别(了解)
		概念：多个事务之间隔离，相互独立。但是如果多个事务操作同一批数据，则会引发问题，需要设置不同的隔离级别
		存在问题
			1.脏读：一个事务读到了另一个事务中没有提交的数据
			2.不可重复读：在同一个事务中，两次读取的数据不一样
			3.幻读：一个事务操作数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改
		隔离级别
			1.read uncommitted：读未提交
				可能产生问题：脏读、不可重复读、幻读
			2.read committed：读已提交
				可能产生问题：不可重复读、幻读
			3.repeatable read：可重复读
				可能产生问题：幻读
			4.serializable：串行化
				可以解决所有问题
			安全性越高，效率越低
			数据库查询隔离级别：select @@tx_isolation;
			数据库设置隔离级别：set global transaction isolation level 级别字符串;
			
DCL:管理用户，授权
	1.管理用户
		1.添加用户
			* create user '用户名'@'主机名' IDENTIFIED BY '密码';
		2.删除用户
			* drop user '用户名'@'主机名';
		3.修改用户密码
			* update user set password = password('新密码')where user = '用户名';
			* set password for '用户名'@'主机名' = password('新密码');
		4.查询用户
			* use mysql;
			* select * from user;
		忘记root用户密码
			1.用管理员运行cmd
			2.net stop mysql
			3.mysqld --skip-grant-tables
				就可以无密码登陆了。
			4.修改密码
			5.任务管理器，关闭mysqld
			6.用管理员运行cmd net start mysql
	2.授权
		查询权限
			show grant for '用户名'@'主机名';
		授予权限
			grant 权限列表 on 数据库名.表明 TO '用户名'@'主机名';
			ALL可以代表所有权限，*.*可以代表所有数据库数据表
		撤销权限
			revoke 权限列表 on 数据库名.表名 FROM '用户名'@'主机名';
			ALL可以代表所有权限，*.*可以代表所有数据库数据表
	











